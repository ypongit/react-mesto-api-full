{"ast":null,"code":"var _jsxFileName = \"E:\\\\OpenServer_5_3_8\\\\domains\\\\yprac.local\\\\mesto-react\\\\src\\\\components\\\\App\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Header from '../Header';\nimport Main from '../Main/Main';\nimport Footer from '../Footer/Footer';\nimport PopupWithForm from '../PopupWithForm/PopupWithForm';\nimport ImagePopup from '../ImagePopup/ImagePopup';\nimport api from \"../../utils/Api\";\nimport EditProfilePopup from \"../EditProfilePopup/EditProfilePopup\";\nimport EditAvatarPopup from \"../EditAvatarPopup/EditAvatarPopup\";\nimport AddPlacePopup from '../AddPlacePopup/AddPlacePopup'; // Импортируем объект контекста\n\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // переменные состояния, отвечающие за видимость трёх попапов:\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  /* Значение переменной задаётся из обработчика handleCardClick\n   и сбрасывается из обработчика closeAllPopups. */\n\n  const [selectedCard, setSelectedCard] = React.useState(null);\n  const [currentUser, setCurrentUser] = React.useState({});\n  const [cards, setCards] = React.useState([]); // запрос к API за данными карточек\n\n  React.useEffect(() => {\n    api.getCards().then(res => {\n      // console.log('getCards -> ', res)\n      const cardsData = res.map(item => {\n        return {\n          name: item.name,\n          link: item.link,\n          _id: item._id,\n          likes: item.likes,\n          owner: item.owner\n        };\n      }); // Сохраняем карточки в стейт cards\n\n      setCards(cardsData);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []); // добавление карточки\n\n  function handleAddPlaceSubmit(_ref) {\n    let {\n      name,\n      link\n    } = _ref;\n    console.log(\"handleAddPlaceSubmit!!!\");\n    api.addCard({\n      name,\n      link\n    }).then(newCard => {\n      setCards([newCard, ...cards]);\n      closeAllPopups();\n    }).catch(err => {\n      console.log(err);\n    });\n  } // установка- снятие лайка\n\n\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n    /* if (!isLiked){\n      api.addLike(card._id)\n      .then((newCard) => {\n        setCards((state) =>\n          state.map((c) => (c._id === card._id ? newCard : c)));\n    }).catch((err) => {\n      console.log(err);\n    });\n    } else {\n      api.deleteLike(card._id)\n        .then((newCard) => {\n          setCards((state) =>\n            state.map((c) =>( c._id === card._id ? newCard : c)));\n      }).catch((err) => {\n        console.log(err);\n      });\n    } */\n\n    api.changeLikeCardStatus(card._id, isLiked).then(newCard => {\n      setCards(state => state.map(c => c._id === card._id ? newCard : c));\n    }).catch(err => {\n      console.log(err);\n    });\n  } // удаление карточки\n\n\n  function handleCardDelete(card) {\n    const isOwn = card.owner._id === currentUser._id;\n    console.log('isOwn -> ', isOwn);\n\n    if (isOwn) {\n      api.deleteCard(card._id).then(() => {\n        setCards(state => state.filter(c => c._id !== card._id));\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  } // запрос к API за данными пользователя\n\n\n  React.useEffect(() => {\n    api.getProfile().then(currentUserData => {\n      // console.log('currentUserData -> ', currentUserData);\n      setCurrentUser(currentUserData);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []); // обработчик редактирования профиля\n\n  function handleUpdateUser(_ref2) {\n    let {\n      name,\n      about\n    } = _ref2;\n    api.setUserInfo({\n      name,\n      about\n    }).then(currentUserData => {\n      // console.log('currentUserData -> ', currentUserData);\n      setCurrentUser(currentUserData);\n      closeAllPopups();\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function handleUpdateAvatar(avatar) {\n    api.setAvatar(avatar).then(currentUserData => {\n      // console.log('currentUserData -> ', currentUserData);\n      setCurrentUser(currentUserData);\n      closeAllPopups();\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  } // обработчик пропса onClose компонента PopupWithForm\n\n\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setSelectedCard(null);\n  }\n\n  function handleCardClick(card) {\n    setSelectedCard(card);\n  }\n\n  return (\n    /*#__PURE__*/\n    // «Внедряем» данные из currentUser с помощью провайдера контекста\n    _jsxDEV(CurrentUserContext.Provider, {\n      value: currentUser,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Main // Прокидываем пропсы в компонент Main\n        , {\n          cards: cards,\n          onEditProfile: handleEditProfileClick,\n          onAddPlace: handleAddPlaceClick,\n          onEditAvatar: handleEditAvatarClick,\n          onCardClick: handleCardClick,\n          onCardLike: handleCardLike,\n          onCardDelete: handleCardDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(EditProfilePopup, {\n          isOpen: isEditProfilePopupOpen,\n          onClose: closeAllPopups,\n          onUpdateUser: handleUpdateUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(AddPlacePopup, {\n          isOpen: isAddPlacePopupOpen,\n          onClose: closeAllPopups,\n          onAddPlace: handleAddPlaceSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(PopupWithForm, {\n          name: \"card_delete\",\n          title: \"\\u0412\\u044B \\u0443\\u0432\\u0435\\u0440\\u0435\\u043D\\u044B?\",\n          buttonTitle: \"\\u0414\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(EditAvatarPopup, {\n          isOpen: isEditAvatarPopupOpen,\n          onClose: closeAllPopups,\n          onUpdateAvatar: handleUpdateAvatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(ImagePopup, {\n          card: selectedCard,\n          onClose: closeAllPopups\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"HeogXORkMI6fM+OxuuQLg4fc/sM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/OpenServer_5_3_8/domains/yprac.local/mesto-react/src/components/App/App.js"],"names":["React","Header","Main","Footer","PopupWithForm","ImagePopup","api","EditProfilePopup","EditAvatarPopup","AddPlacePopup","CurrentUserContext","App","isEditProfilePopupOpen","setIsEditProfilePopupOpen","useState","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","selectedCard","setSelectedCard","currentUser","setCurrentUser","cards","setCards","useEffect","getCards","then","res","cardsData","map","item","name","link","_id","likes","owner","catch","err","console","log","handleAddPlaceSubmit","addCard","newCard","closeAllPopups","handleCardLike","card","isLiked","some","i","changeLikeCardStatus","state","c","handleCardDelete","isOwn","deleteCard","filter","getProfile","currentUserData","handleUpdateUser","about","setUserInfo","handleUpdateAvatar","avatar","setAvatar","handleEditAvatarClick","handleEditProfileClick","handleAddPlaceClick","handleCardClick"],"mappings":";;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAOC,aAAP,MAA0B,gCAA1B,C,CACA;;AACA,SAASC,kBAAT,QAAmC,mCAAnC;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,sBAAD,EAAyBC,yBAAzB,IAAsDb,KAAK,CAACc,QAAN,CAAe,KAAf,CAA5D;AACA,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDhB,KAAK,CAACc,QAAN,CAAe,KAAf,CAAtD;AACA,QAAM,CAACG,qBAAD,EAAwBC,wBAAxB,IAAoDlB,KAAK,CAACc,QAAN,CAAe,KAAf,CAA1D;AACA;AACF;;AACE,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCpB,KAAK,CAACc,QAAN,CAAe,IAAf,CAAxC;AAEA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAiCtB,KAAK,CAACc,QAAN,CAAe,EAAf,CAAvC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBxB,KAAK,CAACc,QAAN,CAAe,EAAf,CAA1B,CAVa,CAWf;;AACAd,EAAAA,KAAK,CAACyB,SAAN,CAAgB,MAAM;AACpBnB,IAAAA,GAAG,CAACoB,QAAJ,GACGC,IADH,CACQC,GAAG,IAAI;AACX;AACA,YAAMC,SAAS,GAAGD,GAAG,CAACE,GAAJ,CAAQC,IAAI,IAAI;AAChC,eAAO;AACLC,UAAAA,IAAI,EAAED,IAAI,CAACC,IADN;AAELC,UAAAA,IAAI,EAAEF,IAAI,CAACE,IAFN;AAGLC,UAAAA,GAAG,EAAEH,IAAI,CAACG,GAHL;AAILC,UAAAA,KAAK,EAAEJ,IAAI,CAACI,KAJP;AAKLC,UAAAA,KAAK,EAAEL,IAAI,CAACK;AALP,SAAP;AAOD,OARiB,CAAlB,CAFW,CAWX;;AACAZ,MAAAA,QAAQ,CAACK,SAAD,CAAR;AACD,KAdH,EAeGQ,KAfH,CAeUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAjBH;AAkBD,GAnBD,EAmBE,EAnBF,EAZe,CAgCf;;AACA,WAASG,oBAAT,OAA4C;AAAA,QAAd;AAACT,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAc;AAC1CM,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAlC,IAAAA,GAAG,CAACoC,OAAJ,CAAY;AAACV,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAZ,EACCN,IADD,CACOgB,OAAD,IAAa;AACjBnB,MAAAA,QAAQ,CAAC,CAACmB,OAAD,EAAU,GAAGpB,KAAb,CAAD,CAAR;AACAqB,MAAAA,cAAc;AACf,KAJD,EAKCP,KALD,CAKQC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAPD;AAQD,GA3Cc,CA4Cf;;;AACA,WAASO,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B;AACA,UAAMC,OAAO,GAAGD,IAAI,CAACX,KAAL,CAAWa,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACf,GAAF,KAAUb,WAAW,CAACa,GAA3C,CAAhB;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE5B,IAAAA,GAAG,CAAC4C,oBAAJ,CAAyBJ,IAAI,CAACZ,GAA9B,EAAmCa,OAAnC,EACKpB,IADL,CACWgB,OAAD,IAAa;AACjBnB,MAAAA,QAAQ,CAAE2B,KAAD,IACPA,KAAK,CAACrB,GAAN,CAAWsB,CAAD,IAAOA,CAAC,CAAClB,GAAF,KAAUY,IAAI,CAACZ,GAAf,GAAqBS,OAArB,GAA+BS,CAAhD,CADM,CAAR;AAEH,KAJH,EAKGf,KALH,CAKUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAPH;AAQC,GAzEY,CA0Eb;;;AACA,WAASe,gBAAT,CAA0BP,IAA1B,EAA+B;AAC7B,UAAMQ,KAAK,GAAGR,IAAI,CAACV,KAAL,CAAWF,GAAX,KAAmBb,WAAW,CAACa,GAA7C;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBc,KAAzB;;AACA,QAAIA,KAAJ,EAAU;AACRhD,MAAAA,GAAG,CAACiD,UAAJ,CAAeT,IAAI,CAACZ,GAApB,EACCP,IADD,CACM,MAAM;AACVH,QAAAA,QAAQ,CAAE2B,KAAD,IAAWA,KAAK,CAACK,MAAN,CAAcJ,CAAD,IAAOA,CAAC,CAAClB,GAAF,KAAUY,IAAI,CAACZ,GAAnC,CAAZ,CAAR;AACD,OAHD,EAICG,KAJD,CAIQC,GAAD,IAAS;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,OAND;AAOD;AACF,GAvFY,CAwFf;;;AACEtC,EAAAA,KAAK,CAACyB,SAAN,CAAgB,MAAM;AACpBnB,IAAAA,GAAG,CAACmD,UAAJ,GACC9B,IADD,CACM+B,eAAe,IAAI;AACvB;AACApC,MAAAA,cAAc,CAACoC,eAAD,CAAd;AACD,KAJD,EAKCrB,KALD,CAKQC,GAAD,IAAS;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAAkB,KALnC;AAMD,GAPD,EAOG,EAPH,EAzFa,CAkGf;;AACE,WAASqB,gBAAT,QAAyC;AAAA,QAAf;AAAC3B,MAAAA,IAAD;AAAO4B,MAAAA;AAAP,KAAe;AACvCtD,IAAAA,GAAG,CAACuD,WAAJ,CAAgB;AAAC7B,MAAAA,IAAD;AAAO4B,MAAAA;AAAP,KAAhB,EACCjC,IADD,CACM+B,eAAe,IAAI;AACvB;AACApC,MAAAA,cAAc,CAACoC,eAAD,CAAd;AACAd,MAAAA,cAAc;AACf,KALD,EAMCP,KAND,CAMQC,GAAD,IAAS;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAAkB,KANnC;AAOD;;AAED,WAASwB,kBAAT,CAA4BC,MAA5B,EAAmC;AACjCzD,IAAAA,GAAG,CAAC0D,SAAJ,CAAcD,MAAd,EACCpC,IADD,CACM+B,eAAe,IAAI;AACvB;AACApC,MAAAA,cAAc,CAACoC,eAAD,CAAd;AACAd,MAAAA,cAAc;AACf,KALD,EAMCP,KAND,CAMQC,GAAD,IAAS;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAAkB,KANnC;AAOD;;AAED,WAAS2B,qBAAT,GAAiC;AAC/B/C,IAAAA,wBAAwB,CAAC,IAAD,CAAxB;AACD;;AAED,WAASgD,sBAAT,GAAkC;AAChCrD,IAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACD;;AAED,WAASsD,mBAAT,GAA+B;AAC7BnD,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACD,GAjIY,CAmIb;;;AACA,WAAS4B,cAAT,GAA0B;AACxB/B,IAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACAG,IAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACAE,IAAAA,wBAAwB,CAAC,KAAD,CAAxB;AACAE,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD;;AAED,WAASgD,eAAT,CAAyBtB,IAAzB,EAA+B;AAC7B1B,IAAAA,eAAe,CAAC0B,IAAD,CAAf;AACD;;AAED;AAAA;AACE;AACA,YAAC,kBAAD,CAAoB,QAApB;AAA6B,MAAA,KAAK,EAAEzB,WAApC;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD,CACE;AADF;AAEE,UAAA,KAAK,EAAEE,KAFT;AAGE,UAAA,aAAa,EAAE2C,sBAHjB;AAIE,UAAA,UAAU,EAAEC,mBAJd;AAKE,UAAA,YAAY,EAAEF,qBALhB;AAME,UAAA,WAAW,EAAEG,eANf;AAOE,UAAA,UAAU,EAAEvB,cAPd;AAQE,UAAA,YAAY,EAAEQ;AARhB;AAAA;AAAA;AAAA;AAAA,gBAFF,eAaE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBAbF,eAgBA,QAAC,gBAAD;AAAkB,UAAA,MAAM,EAAEzC,sBAA1B;AAAkD,UAAA,OAAO,EAAEgC,cAA3D;AAA2E,UAAA,YAAY,EAAEe;AAAzF;AAAA;AAAA;AAAA;AAAA,gBAhBA,eAmBA,QAAC,aAAD;AACE,UAAA,MAAM,EAAE5C,mBADV;AAEE,UAAA,OAAO,EAAE6B,cAFX;AAGE,UAAA,UAAU,EAAEH;AAHd;AAAA;AAAA;AAAA;AAAA,gBAnBA,eA0BA,QAAC,aAAD;AAAe,UAAA,IAAI,EAAC,aAApB;AAAkC,UAAA,KAAK,EAAC,0DAAxC;AAAsD,UAAA,WAAW,EAAC;AAAlE;AAAA;AAAA;AAAA;AAAA,gBA1BA,eA6BA,QAAC,eAAD;AAAiB,UAAA,MAAM,EAAExB,qBAAzB;AAAgD,UAAA,OAAO,EAAE2B,cAAzD;AAAyE,UAAA,cAAc,EAAEkB;AAAzF;AAAA;AAAA;AAAA;AAAA,gBA7BA,eAgCA,QAAC,UAAD;AACE,UAAA,IAAI,EAAE3C,YADR;AAEE,UAAA,OAAO,EAAEyB;AAFX;AAAA;AAAA;AAAA;AAAA,gBAhCA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFF;AA2CD;;GA1LQjC,G;;KAAAA,G;AA4LT,eAAeA,GAAf","sourcesContent":["\nimport React from \"react\";\nimport Header from '../Header';\nimport Main from '../Main/Main';\nimport Footer from '../Footer/Footer';\nimport PopupWithForm from '../PopupWithForm/PopupWithForm';\nimport ImagePopup from '../ImagePopup/ImagePopup';\nimport api from \"../../utils/Api\";\nimport EditProfilePopup from \"../EditProfilePopup/EditProfilePopup\";\nimport EditAvatarPopup from \"../EditAvatarPopup/EditAvatarPopup\";\nimport AddPlacePopup from '../AddPlacePopup/AddPlacePopup';\n// Импортируем объект контекста\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext';\n\nfunction App() {\n  // переменные состояния, отвечающие за видимость трёх попапов:\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  /* Значение переменной задаётся из обработчика handleCardClick\n   и сбрасывается из обработчика closeAllPopups. */\n  const [selectedCard, setSelectedCard] = React.useState(null);\n\n  const [currentUser, setCurrentUser ] = React.useState({});\n  const [cards, setCards] = React.useState([]);\n// запрос к API за данными карточек\nReact.useEffect(() => {\n  api.getCards()\n    .then(res => {\n      // console.log('getCards -> ', res)\n      const cardsData = res.map(item => {\n        return {\n          name: item.name,\n          link: item.link,\n          _id: item._id,\n          likes: item.likes,\n          owner: item.owner\n        }\n      });\n      // Сохраняем карточки в стейт cards\n      setCards(cardsData);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n},[])\n// добавление карточки\nfunction handleAddPlaceSubmit({name, link}) {\n  console.log(\"handleAddPlaceSubmit!!!\")\n  api.addCard({name, link})\n  .then((newCard) => {\n    setCards([newCard, ...cards]);\n    closeAllPopups();\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n}\n// установка- снятие лайка\nfunction handleCardLike(card) {\n  // Снова проверяем, есть ли уже лайк на этой карточке\n  const isLiked = card.likes.some(i => i._id === currentUser._id);\n  /* if (!isLiked){\n    api.addLike(card._id)\n    .then((newCard) => {\n      setCards((state) =>\n        state.map((c) => (c._id === card._id ? newCard : c)));\n  }).catch((err) => {\n    console.log(err);\n  });\n  } else {\n    api.deleteLike(card._id)\n      .then((newCard) => {\n        setCards((state) =>\n          state.map((c) =>( c._id === card._id ? newCard : c)));\n    }).catch((err) => {\n      console.log(err);\n    });\n  } */\n  api.changeLikeCardStatus(card._id, isLiked)\n      .then((newCard) => {\n        setCards((state) =>\n          state.map((c) => c._id === card._id ? newCard : c));\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n  }\n  // удаление карточки\n  function handleCardDelete(card){\n    const isOwn = card.owner._id === currentUser._id;\n    console.log('isOwn -> ', isOwn);\n    if (isOwn){\n      api.deleteCard(card._id)\n      .then(() => {\n        setCards((state) => state.filter((c) => c._id !== card._id));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    }\n  }\n// запрос к API за данными пользователя\n  React.useEffect(() => {\n    api.getProfile()\n    .then(currentUserData => {\n      // console.log('currentUserData -> ', currentUserData);\n      setCurrentUser(currentUserData);\n    })\n    .catch((err) => {console.log(err);});\n  }, []);\n\n// обработчик редактирования профиля\n  function handleUpdateUser({name, about}) {\n    api.setUserInfo({name, about})\n    .then(currentUserData => {\n      // console.log('currentUserData -> ', currentUserData);\n      setCurrentUser(currentUserData);\n      closeAllPopups();\n    })\n    .catch((err) => {console.log(err);});\n  }\n\n  function handleUpdateAvatar(avatar){\n    api.setAvatar(avatar)\n    .then(currentUserData => {\n      // console.log('currentUserData -> ', currentUserData);\n      setCurrentUser(currentUserData);\n      closeAllPopups();\n    })\n    .catch((err) => {console.log(err);});\n  }\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n\n  // обработчик пропса onClose компонента PopupWithForm\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setSelectedCard(null);\n  }\n\n  function handleCardClick(card) {\n    setSelectedCard(card);\n  }\n\n  return (\n    // «Внедряем» данные из currentUser с помощью провайдера контекста\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"page\">\n        <Header />\n        <Main\n          // Прокидываем пропсы в компонент Main\n          cards={cards}\n          onEditProfile={handleEditProfileClick}\n          onAddPlace={handleAddPlaceClick}\n          onEditAvatar={handleEditAvatarClick}\n          onCardClick={handleCardClick}\n          onCardLike={handleCardLike}\n          onCardDelete={handleCardDelete}\n        />\n\n        <Footer />\n\n      {/* Форма редактирования профиля («Редактировать профиль») */}\n      <EditProfilePopup isOpen={isEditProfilePopupOpen} onClose={closeAllPopups} onUpdateUser={handleUpdateUser} />\n\n      {/* Форма добавления карточки («Новое место»)*/}\n      <AddPlacePopup\n        isOpen={isAddPlacePopupOpen}\n        onClose={closeAllPopups}\n        onAddPlace={handleAddPlaceSubmit}\n      />\n\n      {/* Форма удаления карточки («Вы уверены?»)*/}\n      <PopupWithForm name=\"card_delete\" title=\"Вы уверены?\" buttonTitle=\"Да\" />\n\n      {/* Форма обновления аватара («Обновить аватар»)*/}\n      <EditAvatarPopup isOpen={isEditAvatarPopupOpen} onClose={closeAllPopups} onUpdateAvatar={handleUpdateAvatar} />\n\n      {/* Значение selectedCard должно передаваться с помощью пропса card в компонент ImagePopup */}\n      <ImagePopup\n        card={selectedCard}\n        onClose={closeAllPopups}\n      />\n\n      </div>\n      </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}