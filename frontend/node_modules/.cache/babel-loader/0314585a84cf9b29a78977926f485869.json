{"ast":null,"code":"var _jsxFileName = \"E:\\\\OpenServer_5_3_8\\\\domains\\\\yprac.local\\\\react-mesto-auth\\\\src\\\\components\\\\App\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Route, Switch, Redirect, useHistory } from \"react-router-dom\";\nimport Header from '../Header';\nimport Login from '../Login/Login';\nimport Register from '../Register/Register';\nimport * as mestoAuth from '../../mestoAuth';\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute';\nimport Main from '../Main/Main';\nimport Footer from '../Footer/Footer';\nimport PopupWithForm from '../PopupWithForm/PopupWithForm';\nimport ImagePopup from '../ImagePopup/ImagePopup';\nimport api from \"../../utils/Api\";\nimport EditProfilePopup from \"../EditProfilePopup/EditProfilePopup\";\nimport EditAvatarPopup from \"../EditAvatarPopup/EditAvatarPopup\";\nimport AddPlacePopup from '../AddPlacePopup/AddPlacePopup'; // Импортируем объект контекста\n\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // переменная содержит статус пользователя — вошёл он в систему или нет\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [userData, setUserData] = useState(null);\n  const history = useHistory(); // переменные состояния, отвечающие за видимость трёх попапов:\n\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  /* Значение переменной задаётся из обработчика handleCardClick\n   и сбрасывается из обработчика closeAllPopups. */\n\n  const [selectedCard, setSelectedCard] = React.useState(null); // Контекст текущего пользователя\n\n  const [currentUser, setCurrentUser] = React.useState({});\n  const [cards, setCards] = React.useState([]);\n  useEffect(() => {\n    tokenCheck();\n  }, []);\n  useEffect(() => {\n    if (loggedIn) {\n      history.push(\"/\");\n      return;\n    }\n\n    history.push(\"/signup\");\n  }, [loggedIn]); // запрос к API за данными карточек\n\n  React.useEffect(() => {\n    api.getCards().then(res => {\n      // console.log('getCards -> ', res)\n      const cardsData = res.map(item => {\n        return {\n          name: item.name,\n          link: item.link,\n          _id: item._id,\n          likes: item.likes,\n          owner: item.owner\n        };\n      }); // Сохраняем карточки в стейт cards\n\n      setCards(cardsData);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []); // добавление карточки\n\n  function handleAddPlaceSubmit(_ref) {\n    let {\n      name,\n      link\n    } = _ref;\n    api.addCard({\n      name,\n      link\n    }).then(newCard => {\n      setCards([newCard, ...cards]);\n      closeAllPopups();\n    }).catch(err => {\n      console.log(err);\n    });\n  } // установка- снятие лайка\n\n\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n    api.changeLikeCardStatus(card._id, isLiked).then(newCard => {\n      setCards(state => state.map(c => c._id === card._id ? newCard : c));\n    }).catch(err => {\n      console.log(err);\n    });\n  } // удаление карточки\n\n\n  function handleCardDelete(card) {\n    const isOwn = card.owner._id === currentUser._id;\n\n    if (isOwn) {\n      api.deleteCard(card._id).then(() => {\n        setCards(state => state.filter(c => c._id !== card._id));\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  } // запрос к API за данными пользователя\n\n\n  React.useEffect(() => {\n    api.getProfile().then(currentUserData => {\n      // console.log('currentUserData -> ', currentUserData);\n      setCurrentUser(currentUserData);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []); // обработчик редактирования профиля\n\n  function handleUpdateUser(_ref2) {\n    let {\n      name,\n      about\n    } = _ref2;\n    api.setUserInfo({\n      name,\n      about\n    }).then(currentUserData => {\n      setCurrentUser(currentUserData);\n      closeAllPopups();\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function handleUpdateAvatar(avatar) {\n    api.setAvatar(avatar).then(currentUserData => {\n      // console.log('currentUserData -> ', currentUserData);\n      setCurrentUser(currentUserData);\n      closeAllPopups();\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  } // обработчик пропса onClose компонента PopupWithForm\n\n\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setSelectedCard(null);\n  }\n\n  function handleCardClick(card) {\n    setSelectedCard(card);\n  } // Обработчик формы регистрации\n\n\n  const handleRegister = (email, password) => {\n    return mestoAuth.register(email, password).then(res => {\n      // console.log('res', res)\n      history.push('/signin');\n    });\n  }; // Обработчик формы авторизации\n\n\n  const handleLogin = (email, password) => {\n    console.log('handleLogin -> ');\n    return mestoAuth.authorize(email, password).then(data => {\n      // console.log('data -> ', data)\n      // нужно проверить, есть ли у данных jwt\n      if (!data.token) {\n        return;\n      }\n\n      localStorage.setItem('jwt', data.token); // сбросьте стейт, затем в колбэке установите\n\n      setLoggedIn(true);\n    });\n  };\n\n  const tokenCheck = () => {\n    // если у пользователя есть токен в localStorage,\n    // эта функция проверит, действующий он или нет\n    if (localStorage.getItem('jwt')) {\n      let jwt = localStorage.getItem('jwt');\n      mestoAuth.getContent(jwt).then(res => {\n        if (res) {\n          console.log(\"tokenCheck res.data._id\", res.data._id);\n          setUserData({\n            email: res.email,\n            id: res._id\n          });\n          setLoggedIn(true);\n        }\n      });\n    }\n  };\n\n  console.log(\"userData -> \", userData);\n\n  const handleSignOut = () => {\n    localStorage.removeItem('jwt');\n    setLoggedIn(false);\n  };\n\n  return (\n    /*#__PURE__*/\n    // «Внедряем» данные из currentUser с помощью провайдера контекста\n    _jsxDEV(CurrentUserContext.Provider, {\n      value: currentUser,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          onSignOut: handleSignOut\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/signin\",\n            children: /*#__PURE__*/_jsxDEV(Login, {\n              handleLogin: handleLogin\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/signup\",\n            children: /*#__PURE__*/_jsxDEV(Register, {\n              handleRegister: handleRegister\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n            path: \"/\",\n            loggedIn: loggedIn,\n            children: /*#__PURE__*/_jsxDEV(Main // Прокидываем пропсы в компонент Main\n            , {\n              cards: cards,\n              onEditProfile: handleEditProfileClick,\n              onAddPlace: handleAddPlaceClick,\n              onEditAvatar: handleEditAvatarClick,\n              onCardClick: handleCardClick,\n              onCardLike: handleCardLike,\n              onCardDelete: handleCardDelete\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            children: loggedIn ? /*#__PURE__*/_jsxDEV(Redirect, {\n              to: \"/\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 25\n            }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n              to: \"/signin/\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 47\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(EditProfilePopup, {\n          isOpen: isEditProfilePopupOpen,\n          onClose: closeAllPopups,\n          onUpdateUser: handleUpdateUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(AddPlacePopup, {\n          isOpen: isAddPlacePopupOpen,\n          onClose: closeAllPopups,\n          onAddPlace: handleAddPlaceSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(PopupWithForm, {\n          name: \"card_delete\",\n          title: \"\\u0412\\u044B \\u0443\\u0432\\u0435\\u0440\\u0435\\u043D\\u044B?\",\n          buttonTitle: \"\\u0414\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(EditAvatarPopup, {\n          isOpen: isEditAvatarPopupOpen,\n          onClose: closeAllPopups,\n          onUpdateAvatar: handleUpdateAvatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ImagePopup, {\n          card: selectedCard,\n          onClose: closeAllPopups\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"KhV+//OCADQHoc8iieOuWbdRlfQ=\", false, function () {\n  return [useHistory];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/OpenServer_5_3_8/domains/yprac.local/react-mesto-auth/src/components/App/App.js"],"names":["React","useEffect","useState","Route","Switch","Redirect","useHistory","Header","Login","Register","mestoAuth","ProtectedRoute","Main","Footer","PopupWithForm","ImagePopup","api","EditProfilePopup","EditAvatarPopup","AddPlacePopup","CurrentUserContext","App","loggedIn","setLoggedIn","userData","setUserData","history","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","selectedCard","setSelectedCard","currentUser","setCurrentUser","cards","setCards","tokenCheck","push","getCards","then","res","cardsData","map","item","name","link","_id","likes","owner","catch","err","console","log","handleAddPlaceSubmit","addCard","newCard","closeAllPopups","handleCardLike","card","isLiked","some","i","changeLikeCardStatus","state","c","handleCardDelete","isOwn","deleteCard","filter","getProfile","currentUserData","handleUpdateUser","about","setUserInfo","handleUpdateAvatar","avatar","setAvatar","handleEditAvatarClick","handleEditProfileClick","handleAddPlaceClick","handleCardClick","handleRegister","email","password","register","handleLogin","authorize","data","token","localStorage","setItem","getItem","jwt","getContent","id","handleSignOut","removeItem"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,UAAlC,QAAoD,kBAApD;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAO,KAAKC,SAAZ,MAA2B,iBAA3B;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAOC,aAAP,MAA0B,gCAA1B,C,CACA;;AACA,SAASC,kBAAT,QAAmC,mCAAnC;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACsB,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAC,IAAD,CAAxC;AAEA,QAAMwB,OAAO,GAAGpB,UAAU,EAA1B,CALa,CAOb;;AACA,QAAM,CAACqB,sBAAD,EAAyBC,yBAAzB,IAAsD5B,KAAK,CAACE,QAAN,CAAe,KAAf,CAA5D;AACA,QAAM,CAAC2B,mBAAD,EAAsBC,sBAAtB,IAAgD9B,KAAK,CAACE,QAAN,CAAe,KAAf,CAAtD;AACA,QAAM,CAAC6B,qBAAD,EAAwBC,wBAAxB,IAAoDhC,KAAK,CAACE,QAAN,CAAe,KAAf,CAA1D;AACA;AACF;;AACE,QAAM,CAAC+B,YAAD,EAAeC,eAAf,IAAkClC,KAAK,CAACE,QAAN,CAAe,IAAf,CAAxC,CAba,CAcb;;AACA,QAAM,CAACiC,WAAD,EAAcC,cAAd,IAAgCpC,KAAK,CAACE,QAAN,CAAe,EAAf,CAAtC;AACA,QAAM,CAACmC,KAAD,EAAQC,QAAR,IAAoBtC,KAAK,CAACE,QAAN,CAAe,EAAf,CAA1B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdsC,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;AAIAtC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,QAAJ,EAAc;AACZI,MAAAA,OAAO,CAACc,IAAR,CAAa,GAAb;AACA;AACD;;AACDd,IAAAA,OAAO,CAACc,IAAR,CAAa,SAAb;AACD,GANQ,EAMN,CAAClB,QAAD,CANM,CAAT,CAtBa,CA8Bb;;AACAtB,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AACpBe,IAAAA,GAAG,CAACyB,QAAJ,GACGC,IADH,CACQC,GAAG,IAAI;AACX;AACA,YAAMC,SAAS,GAAGD,GAAG,CAACE,GAAJ,CAAQC,IAAI,IAAI;AAChC,eAAO;AACLC,UAAAA,IAAI,EAAED,IAAI,CAACC,IADN;AAELC,UAAAA,IAAI,EAAEF,IAAI,CAACE,IAFN;AAGLC,UAAAA,GAAG,EAAEH,IAAI,CAACG,GAHL;AAILC,UAAAA,KAAK,EAAEJ,IAAI,CAACI,KAJP;AAKLC,UAAAA,KAAK,EAAEL,IAAI,CAACK;AALP,SAAP;AAOD,OARiB,CAAlB,CAFW,CAWX;;AACAb,MAAAA,QAAQ,CAACM,SAAD,CAAR;AACD,KAdH,EAeGQ,KAfH,CAeUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAjBH;AAkBD,GAnBD,EAmBG,EAnBH,EA/Ba,CAoDb;;AACA,WAASG,oBAAT,OAA8C;AAAA,QAAhB;AAAET,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAgB;AAC5ChC,IAAAA,GAAG,CAACyC,OAAJ,CAAY;AAAEV,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAZ,EACGN,IADH,CACSgB,OAAD,IAAa;AACjBpB,MAAAA,QAAQ,CAAC,CAACoB,OAAD,EAAU,GAAGrB,KAAb,CAAD,CAAR;AACAsB,MAAAA,cAAc;AACf,KAJH,EAKGP,KALH,CAKUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAPH;AAQD,GA9DY,CA+Db;;;AACA,WAASO,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B;AACA,UAAMC,OAAO,GAAGD,IAAI,CAACX,KAAL,CAAWa,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACf,GAAF,KAAUd,WAAW,CAACc,GAA3C,CAAhB;AAEAjC,IAAAA,GAAG,CAACiD,oBAAJ,CAAyBJ,IAAI,CAACZ,GAA9B,EAAmCa,OAAnC,EACGpB,IADH,CACSgB,OAAD,IAAa;AACjBpB,MAAAA,QAAQ,CAAE4B,KAAD,IACPA,KAAK,CAACrB,GAAN,CAAWsB,CAAD,IAAOA,CAAC,CAAClB,GAAF,KAAUY,IAAI,CAACZ,GAAf,GAAqBS,OAArB,GAA+BS,CAAhD,CADM,CAAR;AAED,KAJH,EAKGf,KALH,CAKUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAPH;AAQD,GA5EY,CA6Eb;;;AACA,WAASe,gBAAT,CAA0BP,IAA1B,EAAgC;AAC9B,UAAMQ,KAAK,GAAGR,IAAI,CAACV,KAAL,CAAWF,GAAX,KAAmBd,WAAW,CAACc,GAA7C;;AACA,QAAIoB,KAAJ,EAAW;AACTrD,MAAAA,GAAG,CAACsD,UAAJ,CAAeT,IAAI,CAACZ,GAApB,EACGP,IADH,CACQ,MAAM;AACVJ,QAAAA,QAAQ,CAAE4B,KAAD,IAAWA,KAAK,CAACK,MAAN,CAAcJ,CAAD,IAAOA,CAAC,CAAClB,GAAF,KAAUY,IAAI,CAACZ,GAAnC,CAAZ,CAAR;AACD,OAHH,EAIGG,KAJH,CAIUC,GAAD,IAAS;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,OANH;AAOD;AACF,GAzFY,CA0Fb;;;AACArD,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AACpBe,IAAAA,GAAG,CAACwD,UAAJ,GACG9B,IADH,CACQ+B,eAAe,IAAI;AACvB;AACArC,MAAAA,cAAc,CAACqC,eAAD,CAAd;AACD,KAJH,EAKGrB,KALH,CAKUC,GAAD,IAAS;AAAEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAAmB,KALvC;AAMD,GAPD,EAOG,EAPH,EA3Fa,CAoGb;;AACA,WAASqB,gBAAT,QAA2C;AAAA,QAAjB;AAAE3B,MAAAA,IAAF;AAAQ4B,MAAAA;AAAR,KAAiB;AACzC3D,IAAAA,GAAG,CAAC4D,WAAJ,CAAgB;AAAE7B,MAAAA,IAAF;AAAQ4B,MAAAA;AAAR,KAAhB,EACGjC,IADH,CACQ+B,eAAe,IAAI;AACvBrC,MAAAA,cAAc,CAACqC,eAAD,CAAd;AACAd,MAAAA,cAAc;AACf,KAJH,EAKGP,KALH,CAKUC,GAAD,IAAS;AAAEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAAmB,KALvC;AAMD;;AAED,WAASwB,kBAAT,CAA4BC,MAA5B,EAAoC;AAClC9D,IAAAA,GAAG,CAAC+D,SAAJ,CAAcD,MAAd,EACGpC,IADH,CACQ+B,eAAe,IAAI;AACvB;AACArC,MAAAA,cAAc,CAACqC,eAAD,CAAd;AACAd,MAAAA,cAAc;AACf,KALH,EAMGP,KANH,CAMUC,GAAD,IAAS;AAAEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAAmB,KANvC;AAOD;;AAED,WAAS2B,qBAAT,GAAiC;AAC/BhD,IAAAA,wBAAwB,CAAC,IAAD,CAAxB;AACD;;AAED,WAASiD,sBAAT,GAAkC;AAChCrD,IAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACD;;AAED,WAASsD,mBAAT,GAA+B;AAC7BpD,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACD,GAlIY,CAoIb;;;AACA,WAAS6B,cAAT,GAA0B;AACxB/B,IAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACAE,IAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACAE,IAAAA,wBAAwB,CAAC,KAAD,CAAxB;AACAE,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD;;AAED,WAASiD,eAAT,CAAyBtB,IAAzB,EAA+B;AAC7B3B,IAAAA,eAAe,CAAC2B,IAAD,CAAf;AACD,GA9IY,CA+Ib;;;AACA,QAAMuB,cAAc,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC1C,WAAO5E,SAAS,CAAC6E,QAAV,CAAmBF,KAAnB,EAA0BC,QAA1B,EACN5C,IADM,CACAC,GAAD,IAAS;AACb;AACAjB,MAAAA,OAAO,CAACc,IAAR,CAAa,SAAb;AACD,KAJM,CAAP;AAKD,GAND,CAhJa,CAuJb;;;AACA,QAAMgD,WAAW,GAAG,CAACH,KAAD,EAAQC,QAAR,KAAqB;AACvChC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,WAAO7C,SAAS,CAAC+E,SAAV,CAAoBJ,KAApB,EAA2BC,QAA3B,EACL5C,IADK,CACCgD,IAAD,IAAU;AACf;AACC;AACA,UAAG,CAACA,IAAI,CAACC,KAAT,EAAe;AACb;AACF;;AACEC,MAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BH,IAAI,CAACC,KAAjC,EANY,CAOb;;AAEJpE,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KAXQ,CAAP;AAYD,GAdD;;AAgBA,QAAMgB,UAAU,GAAG,MAAM;AACzB;AACA;AACE,QAAIqD,YAAY,CAACE,OAAb,CAAqB,KAArB,CAAJ,EAAgC;AAC9B,UAAIC,GAAG,GAAGH,YAAY,CAACE,OAAb,CAAqB,KAArB,CAAV;AACCpF,MAAAA,SAAS,CAACsF,UAAV,CAAqBD,GAArB,EAA0BrD,IAA1B,CAAgCC,GAAD,IAAS;AACtC,YAAIA,GAAJ,EAAQ;AACNW,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCZ,GAAG,CAAC+C,IAAJ,CAASzC,GAAhD;AAEAxB,UAAAA,WAAW,CAAC;AACX4D,YAAAA,KAAK,EAAE1C,GAAG,CAAC0C,KADA;AAEXY,YAAAA,EAAE,EAAEtD,GAAG,CAACM;AAFG,WAAD,CAAX;AAKA1B,UAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,OAXD;AAYF;AACF,GAlBD;;AAmBA+B,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B/B,QAA5B;;AACA,QAAM0E,aAAa,GAAG,MAAM;AAC1BN,IAAAA,YAAY,CAACO,UAAb,CAAwB,KAAxB;AACA5E,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GAHD;;AAKA;AAAA;AACE;AACA,YAAC,kBAAD,CAAoB,QAApB;AAA6B,MAAA,KAAK,EAAEY,WAApC;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAE+D;AAAnB;AAAA;AAAA;AAAA;AAAA,gBADF,eAGE,QAAC,MAAD;AAAA,kCAEE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,SAAZ;AAAA,mCACE,QAAC,KAAD;AAAO,cAAA,WAAW,EAAEV;AAApB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAFF,eAKE,QAAC,KAAD;AAAO,YAAA,IAAI,EAAC,SAAZ;AAAA,mCACE,QAAC,QAAD;AAAU,cAAA,cAAc,EAAEJ;AAA1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBALF,eAQE,QAAC,cAAD;AACE,YAAA,IAAI,EAAC,GADP;AAEE,YAAA,QAAQ,EAAE9D,QAFZ;AAAA,mCAKE,QAAC,IAAD,CACA;AADA;AAEE,cAAA,KAAK,EAAEe,KAFT;AAGE,cAAA,aAAa,EAAE4C,sBAHjB;AAIE,cAAA,UAAU,EAAEC,mBAJd;AAKE,cAAA,YAAY,EAAEF,qBALhB;AAME,cAAA,WAAW,EAAEG,eANf;AAOE,cAAA,UAAU,EAAEvB,cAPd;AAQE,cAAA,YAAY,EAAEQ;AARhB;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,kBARF,eAyBE,QAAC,KAAD;AAAA,sBACG9C,QAAQ,gBAAG,QAAC,QAAD;AAAU,cAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,oBAAH,gBAAyB,QAAC,QAAD;AAAU,cAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AADpC;AAAA;AAAA;AAAA;AAAA,kBAzBF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAiCE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBAjCF,eAoCE,QAAC,gBAAD;AAAkB,UAAA,MAAM,EAAEK,sBAA1B;AAAkD,UAAA,OAAO,EAAEgC,cAA3D;AAA2E,UAAA,YAAY,EAAEe;AAAzF;AAAA;AAAA;AAAA;AAAA,gBApCF,eAuCE,QAAC,aAAD;AACE,UAAA,MAAM,EAAE7C,mBADV;AAEE,UAAA,OAAO,EAAE8B,cAFX;AAGE,UAAA,UAAU,EAAEH;AAHd;AAAA;AAAA;AAAA;AAAA,gBAvCF,eA8CE,QAAC,aAAD;AAAe,UAAA,IAAI,EAAC,aAApB;AAAkC,UAAA,KAAK,EAAC,0DAAxC;AAAsD,UAAA,WAAW,EAAC;AAAlE;AAAA;AAAA;AAAA;AAAA,gBA9CF,eAiDE,QAAC,eAAD;AAAiB,UAAA,MAAM,EAAEzB,qBAAzB;AAAgD,UAAA,OAAO,EAAE4B,cAAzD;AAAyE,UAAA,cAAc,EAAEkB;AAAzF;AAAA;AAAA;AAAA;AAAA,gBAjDF,eAoDE,QAAC,UAAD;AACE,UAAA,IAAI,EAAE5C,YADR;AAEE,UAAA,OAAO,EAAE0B;AAFX;AAAA;AAAA;AAAA;AAAA,gBApDF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFF;AA+DD;;GAhQQtC,G;UAKSf,U;;;KALTe,G;AAkQT,eAAeA,GAAf","sourcesContent":["\nimport React, { useEffect, useState } from \"react\";\nimport { Route, Switch, Redirect, useHistory } from \"react-router-dom\";\nimport Header from '../Header';\nimport Login from '../Login/Login';\nimport Register from '../Register/Register';\nimport * as mestoAuth from '../../mestoAuth'\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\nimport Main from '../Main/Main';\nimport Footer from '../Footer/Footer';\nimport PopupWithForm from '../PopupWithForm/PopupWithForm';\nimport ImagePopup from '../ImagePopup/ImagePopup';\nimport api from \"../../utils/Api\";\nimport EditProfilePopup from \"../EditProfilePopup/EditProfilePopup\";\nimport EditAvatarPopup from \"../EditAvatarPopup/EditAvatarPopup\";\nimport AddPlacePopup from '../AddPlacePopup/AddPlacePopup';\n// Импортируем объект контекста\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext';\n\n\nfunction App() {\n  // переменная содержит статус пользователя — вошёл он в систему или нет\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [userData, setUserData] = useState(null);\n\n  const history = useHistory();\n\n  // переменные состояния, отвечающие за видимость трёх попапов:\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  /* Значение переменной задаётся из обработчика handleCardClick\n   и сбрасывается из обработчика closeAllPopups. */\n  const [selectedCard, setSelectedCard] = React.useState(null);\n  // Контекст текущего пользователя\n  const [currentUser, setCurrentUser] = React.useState({});\n  const [cards, setCards] = React.useState([]);\n\n  useEffect(() => {\n    tokenCheck();\n  }, []);\n\n  useEffect(() => {\n    if (loggedIn) {\n      history.push(\"/\");\n      return;\n    }\n    history.push(\"/signup\")\n  }, [loggedIn]);\n\n  // запрос к API за данными карточек\n  React.useEffect(() => {\n    api.getCards()\n      .then(res => {\n        // console.log('getCards -> ', res)\n        const cardsData = res.map(item => {\n          return {\n            name: item.name,\n            link: item.link,\n            _id: item._id,\n            likes: item.likes,\n            owner: item.owner\n          }\n        });\n        // Сохраняем карточки в стейт cards\n        setCards(cardsData);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, [])\n\n  // добавление карточки\n  function handleAddPlaceSubmit({ name, link }) {\n    api.addCard({ name, link })\n      .then((newCard) => {\n        setCards([newCard, ...cards]);\n        closeAllPopups();\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n  // установка- снятие лайка\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n\n    api.changeLikeCardStatus(card._id, isLiked)\n      .then((newCard) => {\n        setCards((state) =>\n          state.map((c) => c._id === card._id ? newCard : c));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n  // удаление карточки\n  function handleCardDelete(card) {\n    const isOwn = card.owner._id === currentUser._id;\n    if (isOwn) {\n      api.deleteCard(card._id)\n        .then(() => {\n          setCards((state) => state.filter((c) => c._id !== card._id));\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  }\n  // запрос к API за данными пользователя\n  React.useEffect(() => {\n    api.getProfile()\n      .then(currentUserData => {\n        // console.log('currentUserData -> ', currentUserData);\n        setCurrentUser(currentUserData);\n      })\n      .catch((err) => { console.log(err); });\n  }, []);\n\n  // обработчик редактирования профиля\n  function handleUpdateUser({ name, about }) {\n    api.setUserInfo({ name, about })\n      .then(currentUserData => {\n        setCurrentUser(currentUserData);\n        closeAllPopups();\n      })\n      .catch((err) => { console.log(err); });\n  }\n\n  function handleUpdateAvatar(avatar) {\n    api.setAvatar(avatar)\n      .then(currentUserData => {\n        // console.log('currentUserData -> ', currentUserData);\n        setCurrentUser(currentUserData);\n        closeAllPopups();\n      })\n      .catch((err) => { console.log(err); });\n  }\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n\n  // обработчик пропса onClose компонента PopupWithForm\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setSelectedCard(null);\n  }\n\n  function handleCardClick(card) {\n    setSelectedCard(card);\n  }\n  // Обработчик формы регистрации\n  const handleRegister = (email, password) => {\n    return mestoAuth.register(email, password)\n    .then((res) => {\n      // console.log('res', res)\n      history.push('/signin')\n    });\n  }\n  // Обработчик формы авторизации\n  const handleLogin = (email, password) => {\n    console.log('handleLogin -> ');\n    return mestoAuth.authorize(email, password)\n     .then((data) => {\n      // console.log('data -> ', data)\n       // нужно проверить, есть ли у данных jwt\n       if(!data.token){\n         return;\n      }\n         localStorage.setItem('jwt', data.token);\n        // сбросьте стейт, затем в колбэке установите\n\n    setLoggedIn(true);\n  });\n  }\n\n  const tokenCheck = () => {\n  // если у пользователя есть токен в localStorage,\n  // эта функция проверит, действующий он или нет\n    if (localStorage.getItem('jwt')){\n      let jwt = localStorage.getItem('jwt');\n       mestoAuth.getContent(jwt).then((res) => {\n         if (res){\n           console.log(\"tokenCheck res.data._id\", res.data._id);\n\n           setUserData({\n            email: res.email,\n            id: res._id,\n\n           });\n           setLoggedIn(true);\n         }\n       })\n    }\n  }\n  console.log(\"userData -> \", userData)\n  const handleSignOut = () => {\n    localStorage.removeItem('jwt');\n    setLoggedIn(false);\n  }\n\n  return (\n    // «Внедряем» данные из currentUser с помощью провайдера контекста\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"page\">\n        <Header onSignOut={handleSignOut} />\n        {/* {loggedIn && <Main />}  */}\n        <Switch>\n\n          <Route path=\"/signin\">\n            <Login handleLogin={handleLogin} />\n          </Route>\n          <Route path=\"/signup\">\n            <Register handleRegister={handleRegister}/>\n          </Route>\n          <ProtectedRoute\n            path=\"/\"\n            loggedIn={loggedIn}\n\n          >\n            <Main\n            // Прокидываем пропсы в компонент Main\n              cards={cards}\n              onEditProfile={handleEditProfileClick}\n              onAddPlace={handleAddPlaceClick}\n              onEditAvatar={handleEditAvatarClick}\n              onCardClick={handleCardClick}\n              onCardLike={handleCardLike}\n              onCardDelete={handleCardDelete}\n            />\n          </ProtectedRoute>\n\n          <Route>\n            {loggedIn ? <Redirect to='/' /> : <Redirect to='/signin/' />}\n          </Route>\n        </Switch>\n\n        <Footer />\n\n        {/* Форма редактирования профиля («Редактировать профиль») */}\n        <EditProfilePopup isOpen={isEditProfilePopupOpen} onClose={closeAllPopups} onUpdateUser={handleUpdateUser} />\n\n        {/* Форма добавления карточки («Новое место»)*/}\n        <AddPlacePopup\n          isOpen={isAddPlacePopupOpen}\n          onClose={closeAllPopups}\n          onAddPlace={handleAddPlaceSubmit}\n        />\n\n        {/* Форма удаления карточки («Вы уверены?»)*/}\n        <PopupWithForm name=\"card_delete\" title=\"Вы уверены?\" buttonTitle=\"Да\" />\n\n        {/* Форма обновления аватара («Обновить аватар»)*/}\n        <EditAvatarPopup isOpen={isEditAvatarPopupOpen} onClose={closeAllPopups} onUpdateAvatar={handleUpdateAvatar} />\n\n        {/* Значение selectedCard должно передаваться с помощью пропса card в компонент ImagePopup */}\n        <ImagePopup\n          card={selectedCard}\n          onClose={closeAllPopups}\n        />\n\n      </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}