{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._headers = headers;\n    this._baseUrl = baseUrl; // тело конструктора\n  } // загрузка данных профиля\n\n\n  getProfile() {\n    return fetch(`${this._baseUrl}/users/me `, {\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  } // загрузка карточек\n\n\n  getCards() {\n    // ...\n    return fetch(`${this._baseUrl}/cards `, {\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  } // изменение данных профиля на сервере\n\n\n  setUserInfo(_ref2) {\n    let {\n      name,\n      about\n    } = _ref2;\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  }\n\n  editProfile(name, about) {\n    // ...\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  } // Добавление новой карточки\n\n\n  addCard(_ref3) {\n    let {\n      name,\n      link\n    } = _ref3;\n    // ...\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  } // удаление новой карточки\n\n\n  deleteCard(id) {\n    // ...\n    return fetch(`${this._baseUrl}/cards/${id} `, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  }\n\n  changeLikeCardStatus(id, isLiked) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes `, {\n      method: isLiked ? \"DELETE\" : \"PUT\",\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  } // удаление лайка\n\n\n  deleteLike(id) {\n    // ...\n    return fetch(`${this._baseUrl}/cards/${id}/likes `, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  } // добавление лайка\n\n\n  addLike(id) {\n    // ...\n    return fetch(`${this._baseUrl}/cards/${id}/likes `, {\n      method: \"PUT\",\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  } // установка аватара\n\n\n  setAvatar(_ref4) {\n    let {\n      avatar\n    } = _ref4;\n    // ...\n    return fetch(`${this._baseUrl}/users/me/avatar `, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  } // другие методы работы с API\n\n\n} // внутри api.js создайте экземпляр класса Api с нужными параметрами (включая ваш токен)\n\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-37',\n  // authorization: '3e042cce-8939-40c2-9f95-48414868d982',\n  headers: {\n    authorization: '3e042cce-8939-40c2-9f95-48414868d982',\n    'Content-Type': 'application/json'\n  }\n}); // и экспортируйте этот экземпляр вместо самого класса\n\nexport default api;","map":{"version":3,"sources":["E:/OpenServer_5_3_8/domains/yprac.local/react-mesto-auth/src/utils/Api.js"],"names":["Api","constructor","baseUrl","headers","_headers","_baseUrl","getProfile","fetch","then","res","ok","json","Promise","reject","status","getCards","setUserInfo","name","about","method","body","JSON","stringify","editProfile","addCard","link","deleteCard","id","changeLikeCardStatus","isLiked","deleteLike","addLike","setAvatar","avatar","api","authorization"],"mappings":"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","sourcesContent":["class Api {\r\n  constructor({ baseUrl, headers }) {\r\n    this._headers = headers;\r\n    this._baseUrl = baseUrl;\r\n    // тело конструктора\r\n  }\r\n// загрузка данных профиля\r\n  getProfile(){\r\n    return fetch(`${this._baseUrl}/users/me `, {\r\n      headers: this._headers\r\n    })\r\n    .then(res => res.ok ? res.json() : Promise.reject(res.status))\r\n\r\n  }\r\n// загрузка карточек\r\n  getCards() {\r\n    // ...\r\n    return fetch(`${this._baseUrl}/cards `, {\r\n      headers: this._headers\r\n    })\r\n    .then(res => res.ok ? res.json() : Promise.reject(res.status))\r\n  }\r\n  // изменение данных профиля на сервере\r\n  setUserInfo({name, about}){\r\n    return fetch(`${this._baseUrl}/users/me`, {\r\n      method: \"PATCH\",\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name,\r\n        about\r\n      })\r\n    })\r\n    .then(res => res.ok ? res.json() : Promise.reject(res.status))\r\n  }\r\n\r\n  editProfile(name, about) {\r\n    // ...\r\n    return fetch(`${this._baseUrl}/users/me`, {\r\n      method: \"PATCH\",\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name,\r\n        about\r\n      })\r\n    })\r\n    .then(res => res.ok ? res.json() : Promise.reject(res.status))\r\n  }\r\n// Добавление новой карточки\r\naddCard({name, link}) {\r\n  // ...\r\n  return fetch(`${this._baseUrl}/cards`, {\r\n    method: \"POST\",\r\n    headers: this._headers,\r\n    body: JSON.stringify({\r\n      name,\r\n      link\r\n    })\r\n  })\r\n  .then(res => res.ok ? res.json() : Promise.reject(res.status))\r\n}\r\n// удаление новой карточки\r\ndeleteCard(id) {\r\n  // ...\r\n  return fetch(`${this._baseUrl}/cards/${id} `, {\r\n    method: \"DELETE\",\r\n    headers: this._headers\r\n  })\r\n  .then(res => res.ok ? res.json() : Promise.reject(res.status))\r\n}\r\nchangeLikeCardStatus(id, isLiked){\r\n  return fetch(`${this._baseUrl}/cards/${id}/likes `, {\r\n    method:  isLiked ? \"DELETE\" :  \"PUT\",\r\n    headers: this._headers\r\n  })\r\n  .then(res => res.ok ? res.json() : Promise.reject(res.status))\r\n}\r\n// удаление лайка\r\ndeleteLike(id) {\r\n  // ...\r\n  return fetch(`${this._baseUrl}/cards/${id}/likes `, {\r\n    method: \"DELETE\",\r\n    headers: this._headers\r\n  })\r\n  .then(res => res.ok ? res.json() : Promise.reject(res.status))\r\n}\r\n// добавление лайка\r\naddLike(id) {\r\n  // ...\r\n  return fetch(`${this._baseUrl}/cards/${id}/likes `, {\r\n    method: \"PUT\",\r\n    headers: this._headers\r\n  })\r\n  .then(res => res.ok ? res.json() : Promise.reject(res.status))\r\n}\r\n// установка аватара\r\nsetAvatar({avatar}) {\r\n  // ...\r\n\r\n  return fetch(`${this._baseUrl}/users/me/avatar `, {\r\n    method: \"PATCH\",\r\n    headers: this._headers,\r\n    body: JSON.stringify({\r\n      avatar\r\n    })\r\n  })\r\n  .then(res => res.ok ? res.json() : Promise.reject(res.status))\r\n}\r\n  // другие методы работы с API\r\n}\r\n// внутри api.js создайте экземпляр класса Api с нужными параметрами (включая ваш токен)\r\n\r\n\r\nconst api = new Api({\r\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-37',\r\n  // authorization: '3e042cce-8939-40c2-9f95-48414868d982',\r\n  headers: {\r\n    authorization: '3e042cce-8939-40c2-9f95-48414868d982',\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n// и экспортируйте этот экземпляр вместо самого класса\r\nexport default api;\r\n"]},"metadata":{},"sourceType":"module"}