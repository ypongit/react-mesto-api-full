{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co';\n\nconst checkResponse = response => {\n  console.log(\"response ok -> \", response);\n\n  if (response.ok) {\n    return response.json();\n  }\n\n  return response.json().then(res => {\n    throw res.message[0].messages[0].message;\n  });\n};\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      // 'Accept': 'application/json',\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(response => {\n    console.log(\"register response -> \", response);\n    return response.json();\n    /* try {\n      if (response.status === 200){\n        return response.json();\n      }\n    }catch(e){\n      return (e)\n    } */\n  }).then(res => {\n    console.log(res);\n    return res;\n  }).catch(err => console.log(err));\n};\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(response => {\n    // console.log(\"autorise response -> \", response)\n    if (response.ok) {\n      return response.json();\n    }\n\n    response.json().then(res => {\n      const error = res.message;\n      console.log(\"error -> \", error);\n      throw error;\n    });\n  })\n  /* .then((data) => {\n    console.log(\"data autorise-> \", data)\n    if(data.user){\n      localStorage.setItem('jwt', data.jwt);\n      return data;\n    }\n  }) */\n  .catch(err => console.log(err));\n};\nexport const getContent = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    }\n  }).then(res => res.json());\n};","map":{"version":3,"sources":["E:/OpenServer_5_3_8/domains/yprac.local/react-mesto-auth/src/mestoAuth.js"],"names":["BASE_URL","checkResponse","response","console","log","ok","json","then","res","message","messages","register","email","password","fetch","method","headers","body","JSON","stringify","catch","err","authorize","error","getContent","token"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,+BAAjB;;AACP,MAAMC,aAAa,GAAIC,QAAD,IAAc;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,QAA/B;;AACA,MAAIA,QAAQ,CAACG,EAAb,EAAgB;AACd,WAAOH,QAAQ,CAACI,IAAT,EAAP;AACD;;AAED,SAAOJ,QAAQ,CAACI,IAAT,GAAgBC,IAAhB,CAAsBC,GAAD,IAAS;AACnC,UAAMA,GAAG,CAACC,OAAJ,CAAY,CAAZ,EAAeC,QAAf,CAAwB,CAAxB,EAA2BD,OAAjC;AACD,GAFM,CAAP;AAGD,CATD;;AAWA,OAAO,MAAME,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAOC,KAAK,CAAE,GAAEd,QAAS,SAAb,EAAuB;AACjCe,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP;AACA,sBAAgB;AAFT,KAFwB;AAMjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACN,MAAAA,QAAD;AAAWD,MAAAA;AAAX,KAAf;AAN2B,GAAvB,CAAL,CAQNL,IARM,CAQAL,QAAD,IAAc;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,QAArC;AACA,WAAOA,QAAQ,CAACI,IAAT,EAAP;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACG,GAlBM,EAmBNC,IAnBM,CAmBDC,GAAG,IAAI;AACXL,IAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACA,WAAOA,GAAP;AACD,GAtBM,EAuBNY,KAvBM,CAuBCC,GAAD,IAASlB,OAAO,CAACC,GAAR,CAAYiB,GAAZ,CAvBT,CAAP;AAwBD,CAzBM;AA0BP,OAAO,MAAMC,SAAS,GAAG,CAACV,KAAD,EAAQC,QAAR,KAAqB;AAC5C,SAAOC,KAAK,CAAE,GAAEd,QAAS,SAAb,EAAuB;AACjCe,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFwB;AAKjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACN,MAAAA,QAAD;AAAWD,MAAAA;AAAX,KAAf;AAL2B,GAAvB,CAAL,CAONL,IAPM,CAOAL,QAAQ,IAAI;AACjB;AAEA,QAAIA,QAAQ,CAACG,EAAb,EAAgB;AACd,aAAOH,QAAQ,CAACI,IAAT,EAAP;AACD;;AAEDJ,IAAAA,QAAQ,CAACI,IAAT,GACCC,IADD,CACOC,GAAD,IAAS;AACb,YAAMe,KAAK,GAAGf,GAAG,CAACC,OAAlB;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBmB,KAAzB;AACA,YAAMA,KAAN;AACD,KALD;AAMD,GApBM;AAsBP;AACF;AACA;AACA;AACA;AACA;AACA;AA5BS,GA6BNH,KA7BM,CA6BAC,GAAG,IAAIlB,OAAO,CAACC,GAAR,CAAYiB,GAAZ,CA7BP,CAAP;AA8BD,CA/BM;AAiCP,OAAO,MAAMG,UAAU,GAAIC,KAAD,IAAW;AACnC,SAAOX,KAAK,CAAE,GAAEd,QAAS,WAAb,EAAyB;AACnCe,IAAAA,MAAM,EAAE,KAD2B;AAEnCC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,uBAAmB,UAASS,KAAM;AAF3B;AAF0B,GAAzB,CAAL,CAONlB,IAPM,CAODC,GAAG,IAAIA,GAAG,CAACF,IAAJ,EAPN,CAAP;AAQD,CATM","sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co';\nconst checkResponse = (response) => {\n  console.log(\"response ok -> \", response);\n  if (response.ok){\n    return response.json();\n  }\n\n  return response.json().then((res) => {\n    throw res.message[0].messages[0].message;\n  })\n}\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      // 'Accept': 'application/json',\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({password, email})\n  })\n  .then((response) => {\n    console.log(\"register response -> \", response)\n    return response.json();\n    /* try {\n      if (response.status === 200){\n        return response.json();\n      }\n    }catch(e){\n      return (e)\n    } */\n  })\n  .then(res => {\n    console.log(res);\n    return res;\n  })\n  .catch((err) => console.log(err));\n};\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({password, email})\n  })\n  .then((response => {\n    // console.log(\"autorise response -> \", response)\n\n    if (response.ok){\n      return response.json()\n    }\n\n    response.json()\n    .then((res) => {\n      const error = res.message;\n      console.log(\"error -> \", error)\n      throw error;\n    })\n  }\n  ))\n  /* .then((data) => {\n    console.log(\"data autorise-> \", data)\n    if(data.user){\n      localStorage.setItem('jwt', data.jwt);\n      return data;\n    }\n  }) */\n  .catch(err => console.log(err))\n};\n\nexport const getContent = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\" : `Bearer ${token}`,\n    }\n  })\n  .then(res => res.json())\n}\n"]},"metadata":{},"sourceType":"module"}