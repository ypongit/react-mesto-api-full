{"ast":null,"code":"var _jsxFileName = \"E:\\\\OpenServer_5_3_8\\\\domains\\\\yprac.local\\\\mesto-react\\\\src\\\\components\\\\ImagePopup\\\\ImagePopup.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ImagePopup(_ref) {\n  let {\n    card,\n    onClose\n  } = _ref;\n  return (\n    /*#__PURE__*/\n\n    /* Показ картинки */\n\n    /* Значение selectedCard должно передаваться с помощью пропса card в компонент ImagePopup,\n    где оно будет использоваться для определения наличия CSS-класса видимости\n    и задания адреса изображения в теге img. */\n    _jsxDEV(\"div\", {\n      className: `popup popup_type_image ${card && 'popup_opened'}`,\n      children: /*#__PURE__*/_jsxDEV(\"figure\", {\n        className: \"popup__image-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"popup__close\",\n          onClick: onClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"popup__image\",\n          src: card ? card.link : '',\n          alt: card ? card.name : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"figcaption\", {\n          className: \"popup__caption\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_c = ImagePopup;\nexport default ImagePopup;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImagePopup\");","map":{"version":3,"sources":["E:/OpenServer_5_3_8/domains/yprac.local/mesto-react/src/components/ImagePopup/ImagePopup.js"],"names":["ImagePopup","card","onClose","link","name"],"mappings":";;;AACA,SAASA,UAAT,OAEe;AAAA,MADb;AAAEC,IAAAA,IAAF;AACEC,IAAAA;AADF,GACa;AACb;AAAA;;AACE;;AACA;AACJ;AACA;AACI;AAAK,MAAA,SAAS,EAAG,0BAAyBD,IAAI,IAAI,cAAe,EAAjE;AAAA,6BACE;AAAQ,QAAA,SAAS,EAAC,wBAAlB;AAAA,gCACE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAC,cAAhC;AAA+C,UAAA,OAAO,EAAEC;AAAxD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,SAAS,EAAC,cADZ;AAEE,UAAA,GAAG,EAAED,IAAI,GAAGA,IAAI,CAACE,IAAR,GAAe,EAF1B;AAGE,UAAA,GAAG,EAAEF,IAAI,GAAGA,IAAI,CAACG,IAAR,GAAe;AAH1B;AAAA;AAAA;AAAA;AAAA,gBAFF,eAOE;AAAY,UAAA,SAAS,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AALF;AAiBD;;KApBQJ,U;AAsBT,eAAeA,UAAf","sourcesContent":["\nfunction ImagePopup(\n  { card,\n    onClose }) {\n  return (\n    /* Показ картинки */\n    /* Значение selectedCard должно передаваться с помощью пропса card в компонент ImagePopup,\n    где оно будет использоваться для определения наличия CSS-класса видимости\n    и задания адреса изображения в теге img. */\n    <div className={`popup popup_type_image ${card && 'popup_opened'}`}>\n      <figure className=\"popup__image-container\">\n        <button type=\"button\" className=\"popup__close\" onClick={onClose}></button>\n        <img\n          className=\"popup__image\"\n          src={card ? card.link : ''}\n          alt={card ? card.name : ''}\n        />\n        <figcaption className=\"popup__caption\"></figcaption>\n      </figure>\n    </div>\n  );\n}\n\nexport default ImagePopup;\n"]},"metadata":{},"sourceType":"module"}