{"ast":null,"code":"var _jsxFileName = \"E:\\\\OpenServer_5_3_8\\\\domains\\\\yprac.local\\\\react-mesto-auth\\\\src\\\\components\\\\App\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Route, Switch, Redirect, useHistory } from \"react-router-dom\";\nimport Header from '../Header';\nimport Login from '../Login/Login';\nimport Register from '../Register/Register';\nimport * as mestoAuth from '../../mestoAuth';\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute';\nimport Main from '../Main/Main';\nimport Footer from '../Footer/Footer';\nimport PopupWithForm from '../PopupWithForm/PopupWithForm';\nimport ImagePopup from '../ImagePopup/ImagePopup';\nimport api from \"../../utils/Api\";\nimport EditProfilePopup from \"../EditProfilePopup/EditProfilePopup\";\nimport EditAvatarPopup from \"../EditAvatarPopup/EditAvatarPopup\";\nimport AddPlacePopup from '../AddPlacePopup/AddPlacePopup';\nimport InfoTooltip from '../InfoTooltip/InfoTooltip';\nimport regSuccess from '../../images/regSuccess.svg';\nimport regFail from '../../images/regFail.svg'; // Импортируем объект контекста\n\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // переменная содержит статус пользователя — вошёл он в систему или нет\n  const [loggedIn, setLoggedIn] = useState(false); // const [userData, setUserData] = useState(null);\n\n  const [email, setEmail] = useState(null);\n  const [id, setId] = useState(null);\n  const history = useHistory(); // переменные состояния, отвечающие за видимость попапов:\n\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  const [isInfoTooltipOpen, setIsInfoTooltipOpen] = React.useState(false);\n  /* Значение переменной задаётся из обработчика handleCardClick\n   и сбрасывается из обработчика closeAllPopups. */\n\n  const [selectedCard, setSelectedCard] = React.useState(null); // Контекст текущего пользователя\n\n  const [currentUser, setCurrentUser] = React.useState({});\n  const [cards, setCards] = React.useState([]);\n  useEffect(() => {\n    checkToken();\n  }, []);\n  useEffect(() => {\n    if (loggedIn) {\n      history.push(\"/\");\n      return;\n    }\n\n    history.push(\"/signup\");\n  }, [loggedIn]); // запрос к API за данными карточек\n\n  React.useEffect(() => {\n    api.getCards().then(res => {\n      const cardsData = res.map(item => {\n        return {\n          name: item.name,\n          link: item.link,\n          _id: item._id,\n          likes: item.likes,\n          owner: item.owner\n        };\n      }); // Сохраняем карточки в стейт cards\n\n      setCards(cardsData);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []); // добавление карточки\n\n  function handleAddPlaceSubmit(_ref) {\n    let {\n      name,\n      link\n    } = _ref;\n    api.addCard({\n      name,\n      link\n    }).then(newCard => {\n      setCards([newCard, ...cards]);\n      closeAllPopups();\n    }).catch(err => {\n      console.log(err);\n    });\n  } // установка- снятие лайка\n\n\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n    api.changeLikeCardStatus(card._id, isLiked).then(newCard => {\n      setCards(state => state.map(c => c._id === card._id ? newCard : c));\n    }).catch(err => {\n      console.log(err);\n    });\n  } // удаление карточки\n\n\n  function handleCardDelete(card) {\n    const isOwn = card.owner._id === currentUser._id;\n\n    if (isOwn) {\n      api.deleteCard(card._id).then(() => {\n        setCards(state => state.filter(c => c._id !== card._id));\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  } // запрос к API за данными пользователя\n\n\n  React.useEffect(() => {\n    api.getProfile().then(currentUserData => {\n      setCurrentUser(currentUserData);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []); // обработчик редактирования профиля\n\n  function handleUpdateUser(_ref2) {\n    let {\n      name,\n      about\n    } = _ref2;\n    api.setUserInfo({\n      name,\n      about\n    }).then(currentUserData => {\n      setCurrentUser(currentUserData);\n      closeAllPopups();\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function handleUpdateAvatar(avatar) {\n    api.setAvatar(avatar).then(currentUserData => {\n      setCurrentUser(currentUserData);\n      closeAllPopups();\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n\n  function handleInfoTooltipClick() {\n    setIsInfoTooltipOpen(true);\n  }\n\n  const [InfoTooltipTitle, setInfoTooltipTitle] = useState({\n    title: \"Что-то пошло не так! Попробуйте ещё раз.\",\n    icon: regFail\n  }); // обработчик пропса onClose компонента PopupWithForm\n\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setIsInfoTooltipOpen(false);\n    setSelectedCard(null);\n  }\n\n  function handleCardClick(card) {\n    setSelectedCard(card);\n  } // Обработчик формы регистрации\n\n\n  const handleRegister = (email, password) => {\n    return mestoAuth.register(email, password).then(res => {\n      handleInfoTooltipClick();\n\n      if (res.data) {\n        setInfoTooltipTitle({\n          icon: regSuccess,\n          title: \"Вы успешно зарегистрировались!\"\n        });\n      } else {\n        setInfoTooltipTitle({\n          icon: regFail,\n          title: \"Что-то пошло не так! Попробуйте ещё раз.\"\n        });\n      }\n\n      history.push('/signin');\n    }).catch(err => {\n      console.log(err);\n      handleInfoTooltipClick();\n    });\n  }; // Обработчик формы авторизации\n\n\n  const handleLogin = (email, password) => {\n    // console.log('handleLogin -> ');\n    return mestoAuth.authorize(email, password).then(data => {\n      // console.log('data -> ', data)\n      // нужно проверить, есть ли у данных jwt\n      if (!data.token) {\n        return;\n      }\n\n      localStorage.setItem('jwt', data.token); // сбросьте стейт, затем в колбэке установите\n\n      setLoggedIn(true);\n    });\n  };\n\n  const checkToken = () => {\n    // если у пользователя есть токен в localStorage,\n    // эта функция проверит, действующий он или нет\n    if (localStorage.getItem('jwt')) {\n      const jwt = localStorage.getItem('jwt');\n      mestoAuth.getContent(jwt).then(res => {\n        if (res) {\n          setEmail(res.data.email);\n          setId(res.data._id);\n          /* setUserData({\n           email: res.data.email,\n           id: res.data._id,\n          }); */\n\n          setLoggedIn(true);\n        }\n      });\n    }\n  };\n\n  const handleSignOut = () => {\n    localStorage.removeItem('jwt');\n    setLoggedIn(false);\n  }; // console.log(\"email -> \", email)\n\n\n  return (\n    /*#__PURE__*/\n    // «Внедряем» данные из currentUser с помощью провайдера контекста\n    _jsxDEV(CurrentUserContext.Provider, {\n      value: currentUser,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          userData: userData // email = {userData.email}\n          ,\n          onSignOut: handleSignOut,\n          loggedIn: loggedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/signin\",\n            children: /*#__PURE__*/_jsxDEV(Login, {\n              handleLogin: handleLogin\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/signup\",\n            children: /*#__PURE__*/_jsxDEV(Register, {\n              handleRegister: handleRegister\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n            path: \"/\",\n            loggedIn: loggedIn,\n            children: /*#__PURE__*/_jsxDEV(Main // Прокидываем пропсы в компонент Main\n            , {\n              cards: cards,\n              onEditProfile: handleEditProfileClick,\n              onAddPlace: handleAddPlaceClick,\n              onEditAvatar: handleEditAvatarClick,\n              onCardClick: handleCardClick,\n              onCardLike: handleCardLike,\n              onCardDelete: handleCardDelete\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            children: loggedIn ? /*#__PURE__*/_jsxDEV(Redirect, {\n              to: \"/\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 25\n            }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n              to: \"/signin/\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 47\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(EditProfilePopup, {\n          isOpen: isEditProfilePopupOpen,\n          onClose: closeAllPopups,\n          onUpdateUser: handleUpdateUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(AddPlacePopup, {\n          isOpen: isAddPlacePopupOpen,\n          onClose: closeAllPopups,\n          onAddPlace: handleAddPlaceSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(PopupWithForm, {\n          name: \"card_delete\",\n          title: \"\\u0412\\u044B \\u0443\\u0432\\u0435\\u0440\\u0435\\u043D\\u044B?\",\n          buttonTitle: \"\\u0414\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(EditAvatarPopup, {\n          isOpen: isEditAvatarPopupOpen,\n          onClose: closeAllPopups,\n          onUpdateAvatar: handleUpdateAvatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ImagePopup, {\n          card: selectedCard,\n          onClose: closeAllPopups\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(InfoTooltip, {\n          isOpen: isInfoTooltipOpen,\n          onClose: closeAllPopups,\n          title: InfoTooltipTitle.title,\n          icon: InfoTooltipTitle.icon,\n          name: \"infotool\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"RtmHCHQcCNR594mKOf79QPS+h04=\", false, function () {\n  return [useHistory];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/OpenServer_5_3_8/domains/yprac.local/react-mesto-auth/src/components/App/App.js"],"names":["React","useEffect","useState","Route","Switch","Redirect","useHistory","Header","Login","Register","mestoAuth","ProtectedRoute","Main","Footer","PopupWithForm","ImagePopup","api","EditProfilePopup","EditAvatarPopup","AddPlacePopup","InfoTooltip","regSuccess","regFail","CurrentUserContext","App","loggedIn","setLoggedIn","email","setEmail","id","setId","history","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isInfoTooltipOpen","setIsInfoTooltipOpen","selectedCard","setSelectedCard","currentUser","setCurrentUser","cards","setCards","checkToken","push","getCards","then","res","cardsData","map","item","name","link","_id","likes","owner","catch","err","console","log","handleAddPlaceSubmit","addCard","newCard","closeAllPopups","handleCardLike","card","isLiked","some","i","changeLikeCardStatus","state","c","handleCardDelete","isOwn","deleteCard","filter","getProfile","currentUserData","handleUpdateUser","about","setUserInfo","handleUpdateAvatar","avatar","setAvatar","handleEditAvatarClick","handleEditProfileClick","handleAddPlaceClick","handleInfoTooltipClick","InfoTooltipTitle","setInfoTooltipTitle","title","icon","handleCardClick","handleRegister","password","register","data","handleLogin","authorize","token","localStorage","setItem","getItem","jwt","getContent","handleSignOut","removeItem","userData"],"mappings":"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","sourcesContent":["\nimport React, { useEffect, useState } from \"react\";\nimport { Route, Switch, Redirect, useHistory } from \"react-router-dom\";\nimport Header from '../Header';\nimport Login from '../Login/Login';\nimport Register from '../Register/Register';\nimport * as mestoAuth from '../../mestoAuth'\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\nimport Main from '../Main/Main';\nimport Footer from '../Footer/Footer';\nimport PopupWithForm from '../PopupWithForm/PopupWithForm';\nimport ImagePopup from '../ImagePopup/ImagePopup';\nimport api from \"../../utils/Api\";\nimport EditProfilePopup from \"../EditProfilePopup/EditProfilePopup\";\nimport EditAvatarPopup from \"../EditAvatarPopup/EditAvatarPopup\";\nimport AddPlacePopup from '../AddPlacePopup/AddPlacePopup';\nimport InfoTooltip from '../InfoTooltip/InfoTooltip';\nimport regSuccess from '../../images/regSuccess.svg';\nimport regFail from '../../images/regFail.svg';\n// Импортируем объект контекста\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext';\n\n\nfunction App() {\n  // переменная содержит статус пользователя — вошёл он в систему или нет\n  const [loggedIn, setLoggedIn] = useState(false);\n  // const [userData, setUserData] = useState(null);\n  const [email, setEmail] = useState(null);\n  const [id, setId] = useState(null);\n\n  const history = useHistory();\n\n  // переменные состояния, отвечающие за видимость попапов:\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  const [isInfoTooltipOpen, setIsInfoTooltipOpen] = React.useState(false);\n\n  /* Значение переменной задаётся из обработчика handleCardClick\n   и сбрасывается из обработчика closeAllPopups. */\n  const [selectedCard, setSelectedCard] = React.useState(null);\n  // Контекст текущего пользователя\n  const [currentUser, setCurrentUser] = React.useState({});\n  const [cards, setCards] = React.useState([]);\n\n  useEffect(() => {\n    checkToken();\n  }, []);\n\n  useEffect(() => {\n    if (loggedIn) {\n      history.push(\"/\");\n      return;\n    }\n    history.push(\"/signup\")\n  }, [loggedIn]);\n\n  // запрос к API за данными карточек\n  React.useEffect(() => {\n    api.getCards()\n      .then(res => {\n        const cardsData = res.map(item => {\n          return {\n            name: item.name,\n            link: item.link,\n            _id: item._id,\n            likes: item.likes,\n            owner: item.owner\n          }\n        });\n        // Сохраняем карточки в стейт cards\n        setCards(cardsData);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, [])\n\n  // добавление карточки\n  function handleAddPlaceSubmit({ name, link }) {\n    api.addCard({ name, link })\n      .then((newCard) => {\n        setCards([newCard, ...cards]);\n        closeAllPopups();\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n  // установка- снятие лайка\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n\n    api.changeLikeCardStatus(card._id, isLiked)\n      .then((newCard) => {\n        setCards((state) =>\n          state.map((c) => c._id === card._id ? newCard : c));\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n  // удаление карточки\n  function handleCardDelete(card) {\n    const isOwn = card.owner._id === currentUser._id;\n    if (isOwn) {\n      api.deleteCard(card._id)\n        .then(() => {\n          setCards((state) => state.filter((c) => c._id !== card._id));\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  }\n  // запрос к API за данными пользователя\n  React.useEffect(() => {\n    api.getProfile()\n      .then(currentUserData => {\n        setCurrentUser(currentUserData);\n      })\n      .catch((err) => { console.log(err); });\n  }, []);\n\n  // обработчик редактирования профиля\n  function handleUpdateUser({ name, about }) {\n    api.setUserInfo({ name, about })\n      .then(currentUserData => {\n        setCurrentUser(currentUserData);\n        closeAllPopups();\n      })\n      .catch((err) => { console.log(err); });\n  }\n\n  function handleUpdateAvatar(avatar) {\n    api.setAvatar(avatar)\n      .then(currentUserData => {\n        setCurrentUser(currentUserData);\n        closeAllPopups();\n      })\n      .catch((err) => { console.log(err); });\n  }\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n\n  function handleInfoTooltipClick() {\n    setIsInfoTooltipOpen(true);\n  }\n\n  const[InfoTooltipTitle, setInfoTooltipTitle] = useState({\n    title: \"Что-то пошло не так! Попробуйте ещё раз.\",\n    icon: regFail,\n  });\n\n  // обработчик пропса onClose компонента PopupWithForm\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setIsInfoTooltipOpen(false);\n    setSelectedCard(null);\n  }\n\n  function handleCardClick(card) {\n    setSelectedCard(card);\n  }\n  // Обработчик формы регистрации\n  const handleRegister = (email, password) => {\n    return mestoAuth.register(email, password)\n    .then((res) => {\n      handleInfoTooltipClick();\n\n      if(res.data){\n        setInfoTooltipTitle({\n          icon: regSuccess,\n          title: \"Вы успешно зарегистрировались!\"\n        })\n      } else {\n        setInfoTooltipTitle({\n          icon: regFail,\n          title: \"Что-то пошло не так! Попробуйте ещё раз.\"\n        })\n      }\n\n      history.push('/signin')\n    })\n    .catch((err) => {\n      console.log(err);\n      handleInfoTooltipClick();\n    })\n  }\n  // Обработчик формы авторизации\n  const handleLogin = (email, password) => {\n    // console.log('handleLogin -> ');\n    return mestoAuth.authorize(email, password)\n     .then((data) => {\n      // console.log('data -> ', data)\n       // нужно проверить, есть ли у данных jwt\n       if(!data.token){\n         return;\n      }\n         localStorage.setItem('jwt', data.token);\n        // сбросьте стейт, затем в колбэке установите\n\n    setLoggedIn(true);\n  });\n  }\n\n  const checkToken = () => {\n  // если у пользователя есть токен в localStorage,\n  // эта функция проверит, действующий он или нет\n    if (localStorage.getItem('jwt')){\n      const jwt = localStorage.getItem('jwt');\n       mestoAuth.getContent(jwt).then((res) => {\n         if (res){\n           setEmail(res.data.email);\n           setId(res.data._id);\n           /* setUserData({\n            email: res.data.email,\n            id: res.data._id,\n           }); */\n           setLoggedIn(true);\n         }\n       })\n    }\n  }\n\n  const handleSignOut = () => {\n    localStorage.removeItem('jwt');\n    setLoggedIn(false);\n  }\n  // console.log(\"email -> \", email)\n  return (\n    // «Внедряем» данные из currentUser с помощью провайдера контекста\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"page\">\n        <Header\n          userData = {userData}\n          // email = {userData.email}\n          onSignOut={handleSignOut}\n          loggedIn={loggedIn}\n        />\n\n        <Switch>\n          <Route path=\"/signin\">\n            <Login handleLogin={handleLogin} />\n          </Route>\n          <Route path=\"/signup\">\n            <Register handleRegister={handleRegister}/>\n          </Route>\n          <ProtectedRoute\n            path=\"/\"\n            loggedIn={loggedIn}\n          >\n            <Main\n            // Прокидываем пропсы в компонент Main\n              cards={cards}\n              onEditProfile={handleEditProfileClick}\n              onAddPlace={handleAddPlaceClick}\n              onEditAvatar={handleEditAvatarClick}\n              onCardClick={handleCardClick}\n              onCardLike={handleCardLike}\n              onCardDelete={handleCardDelete}\n            />\n          </ProtectedRoute>\n\n          <Route>\n            {loggedIn ? <Redirect to='/' /> : <Redirect to='/signin/' />}\n          </Route>\n        </Switch>\n\n        <Footer />\n\n        {/* Форма редактирования профиля («Редактировать профиль») */}\n        <EditProfilePopup\n          isOpen={isEditProfilePopupOpen}\n          onClose={closeAllPopups}\n          onUpdateUser={handleUpdateUser}\n        />\n\n        {/* Форма добавления карточки («Новое место»)*/}\n        <AddPlacePopup\n          isOpen={isAddPlacePopupOpen}\n          onClose={closeAllPopups}\n          onAddPlace={handleAddPlaceSubmit}\n        />\n\n        {/* Форма удаления карточки («Вы уверены?»)*/}\n        <PopupWithForm\n          name=\"card_delete\"\n          title=\"Вы уверены?\"\n          buttonTitle=\"Да\"\n        />\n\n        {/* Форма обновления аватара («Обновить аватар»)*/}\n        <EditAvatarPopup\n          isOpen={isEditAvatarPopupOpen}\n          onClose={closeAllPopups}\n          onUpdateAvatar={handleUpdateAvatar}\n        />\n\n        {/* Значение selectedCard должно передаваться с помощью пропса card в компонент ImagePopup */}\n        <ImagePopup\n          card={selectedCard}\n          onClose={closeAllPopups}\n        />\n        {/* информирует пользователя об успешной (или не очень) регистрации. */}\n        <InfoTooltip\n          isOpen={isInfoTooltipOpen}\n          onClose={closeAllPopups}\n          title={InfoTooltipTitle.title}\n          icon={InfoTooltipTitle.icon}\n          name=\"infotool\"\n        />\n\n      </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}