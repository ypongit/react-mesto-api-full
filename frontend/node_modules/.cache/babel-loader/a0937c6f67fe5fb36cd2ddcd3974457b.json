{"ast":null,"code":"var _jsxFileName = \"E:\\\\OpenServer_5_3_8\\\\domains\\\\yprac.local\\\\mesto-react\\\\src\\\\components\\\\App\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Header from '../Header';\nimport Main from '../Main/Main';\nimport Footer from '../Footer/Footer';\nimport PopupWithForm from '../PopupWithForm/PopupWithForm';\nimport ImagePopup from '../ImagePopup/ImagePopup';\nimport api from \"../../utils/Api\";\nimport EditProfilePopup from \"../EditProfilePopup/EditProfilePopup\";\nimport EditAvatarPopup from \"../EditAvatarPopup/EditAvatarPopup\"; // Импортируем объект контекста\n\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // переменные состояния, отвечающие за видимость трёх попапов:\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  /* Значение переменной задаётся из обработчика handleCardClick\n   и сбрасывается из обработчика closeAllPopups. */\n\n  const [selectedCard, setSelectedCard] = React.useState(null);\n  const [currentUser, setCurrentUser] = React.useState({});\n  const [cards, setCards] = React.useState([]); // запрос к API за данными карточек\n\n  React.useEffect(() => {\n    api.getCards().then(res => {\n      // console.log('getCards -> ', res)\n      const cardsData = res.map(item => {\n        return {\n          name: item.name,\n          link: item.link,\n          _id: item._id,\n          likes: item.likes,\n          owner: item.owner\n        };\n      }); // Сохраняем карточки в стейт cards\n\n      setCards(cardsData);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []); // установка- снятие лайка\n\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n    api.changeLikeCardStatus(card._id, !isLiked).then(newCard => {\n      setCards(state => state.map(c => c._id === card._id ? newCard : c));\n    }).catch(err => {\n      console.log(err);\n    });\n  } // запрос к API за данными пользователя\n\n\n  React.useEffect(() => {\n    api.getProfile().then(currentUserData => {\n      // console.log('currentUserData -> ', currentUserData);\n      setCurrentUser(currentUserData);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []); // обработчик редактирования профиля\n\n  function handleUpdateUser(_ref) {\n    let {\n      name,\n      about\n    } = _ref;\n    api.setUserInfo({\n      name,\n      about\n    }).then(currentUserData => {\n      // console.log('currentUserData -> ', currentUserData);\n      setCurrentUser(currentUserData);\n      closeAllPopups();\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function handleUpdateAvatar(avatar) {\n    api.setAvatar(avatar).then(currentUserData => {\n      // console.log('currentUserData -> ', currentUserData);\n      setCurrentUser(currentUserData);\n      closeAllPopups();\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  } // обработчик пропса onClose компонента PopupWithForm\n\n\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setSelectedCard(null);\n  }\n\n  function handleCardClick(card) {\n    setSelectedCard(card);\n  }\n\n  return (\n    /*#__PURE__*/\n    // «Внедряем» данные из currentUser с помощью провайдера контекста\n    _jsxDEV(CurrentUserContext.Provider, {\n      value: currentUser,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Main // Прокидываем пропсы в компонент Main\n        , {\n          cards: cards,\n          onEditProfile: handleEditProfileClick,\n          onAddPlace: handleAddPlaceClick,\n          onEditAvatar: handleEditAvatarClick,\n          onCardClick: handleCardClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(EditProfilePopup, {\n          isOpen: isEditProfilePopupOpen,\n          onClose: closeAllPopups,\n          onUpdateUser: handleUpdateUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(PopupWithForm, {\n          isOpen: isAddPlacePopupOpen,\n          onClose: closeAllPopups,\n          name: \"card_add\",\n          title: \"\\u041D\\u043E\\u0432\\u043E\\u0435 \\u043C\\u0435\\u0441\\u0442\\u043E\",\n          buttonTitle: \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"card-name-input\",\n            className: \"popup__field-wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"name\",\n              id: \"card-name-input\",\n              className: \"popup__field popup__field_card_name\",\n              placeholder: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\",\n              required: true,\n              minLength: \"2\",\n              maxLength: \"30\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"popup__field-error card-name-input-error\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"image-link-input\",\n            className: \"popup__field-wrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"url\",\n              name: \"link\",\n              id: \"image-link-input\",\n              className: \"popup__field popup__field_card_link\",\n              placeholder: \"\\u0421\\u0441\\u044B\\u043B\\u043A\\u0430 \\u043D\\u0430 \\u043A\\u0430\\u0440\\u0442\\u0438\\u043D\\u043A\\u0443\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"popup__field-error image-link-input-error\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(PopupWithForm, {\n          name: \"card_delete\",\n          title: \"\\u0412\\u044B \\u0443\\u0432\\u0435\\u0440\\u0435\\u043D\\u044B?\",\n          buttonTitle: \"\\u0414\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(EditAvatarPopup, {\n          isOpen: isEditAvatarPopupOpen,\n          onClose: closeAllPopups,\n          onUpdateAvatar: handleUpdateAvatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(ImagePopup, {\n          card: selectedCard,\n          onClose: closeAllPopups\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"HeogXORkMI6fM+OxuuQLg4fc/sM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/OpenServer_5_3_8/domains/yprac.local/mesto-react/src/components/App/App.js"],"names":["React","Header","Main","Footer","PopupWithForm","ImagePopup","api","EditProfilePopup","EditAvatarPopup","CurrentUserContext","App","isEditProfilePopupOpen","setIsEditProfilePopupOpen","useState","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","selectedCard","setSelectedCard","currentUser","setCurrentUser","cards","setCards","useEffect","getCards","then","res","cardsData","map","item","name","link","_id","likes","owner","catch","err","console","log","handleCardLike","card","isLiked","some","i","changeLikeCardStatus","newCard","state","c","getProfile","currentUserData","handleUpdateUser","about","setUserInfo","closeAllPopups","handleUpdateAvatar","avatar","setAvatar","handleEditAvatarClick","handleEditProfileClick","handleAddPlaceClick","handleCardClick"],"mappings":"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","sourcesContent":["\nimport React from \"react\";\nimport Header from '../Header';\nimport Main from '../Main/Main';\nimport Footer from '../Footer/Footer';\nimport PopupWithForm from '../PopupWithForm/PopupWithForm';\nimport ImagePopup from '../ImagePopup/ImagePopup';\nimport api from \"../../utils/Api\";\nimport EditProfilePopup from \"../EditProfilePopup/EditProfilePopup\";\nimport EditAvatarPopup from \"../EditAvatarPopup/EditAvatarPopup\";\n// Импортируем объект контекста\nimport { CurrentUserContext } from '../../contexts/CurrentUserContext';\n\nfunction App() {\n  // переменные состояния, отвечающие за видимость трёх попапов:\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  /* Значение переменной задаётся из обработчика handleCardClick\n   и сбрасывается из обработчика closeAllPopups. */\n  const [selectedCard, setSelectedCard] = React.useState(null);\n\n  const [currentUser, setCurrentUser ] = React.useState({});\n  const [cards, setCards] = React.useState([]);\n// запрос к API за данными карточек\nReact.useEffect(() => {\n  api.getCards()\n    .then(res => {\n      // console.log('getCards -> ', res)\n      const cardsData = res.map(item => {\n        return {\n          name: item.name,\n          link: item.link,\n          _id: item._id,\n          likes: item.likes,\n          owner: item.owner\n        }\n      });\n      // Сохраняем карточки в стейт cards\n      setCards(cardsData);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n},[])\n// установка- снятие лайка\nfunction handleCardLike(card) {\n  // Снова проверяем, есть ли уже лайк на этой карточке\n  const isLiked = card.likes.some(i => i._id === currentUser._id);\n  api.changeLikeCardStatus(card._id, !isLiked)\n      .then((newCard) => {\n        setCards((state) =>\n          state.map((c) => c._id === card._id ? newCard : c));\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n  }\n// запрос к API за данными пользователя\n  React.useEffect(() => {\n    api.getProfile()\n    .then(currentUserData => {\n      // console.log('currentUserData -> ', currentUserData);\n      setCurrentUser(currentUserData);\n    })\n    .catch((err) => {console.log(err);});\n  }, []);\n\n// обработчик редактирования профиля\n  function handleUpdateUser({name, about}) {\n    api.setUserInfo({name, about})\n    .then(currentUserData => {\n      // console.log('currentUserData -> ', currentUserData);\n      setCurrentUser(currentUserData);\n      closeAllPopups();\n    })\n    .catch((err) => {console.log(err);});\n  }\n\n  function handleUpdateAvatar(avatar){\n    api.setAvatar(avatar)\n    .then(currentUserData => {\n      // console.log('currentUserData -> ', currentUserData);\n      setCurrentUser(currentUserData);\n      closeAllPopups();\n    })\n    .catch((err) => {console.log(err);});\n  }\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n\n  // обработчик пропса onClose компонента PopupWithForm\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setSelectedCard(null);\n  }\n\n  function handleCardClick(card) {\n    setSelectedCard(card);\n  }\n\n  return (\n    // «Внедряем» данные из currentUser с помощью провайдера контекста\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"page\">\n        <Header />\n        <Main\n          // Прокидываем пропсы в компонент Main\n          cards={cards}\n          onEditProfile={handleEditProfileClick}\n          onAddPlace={handleAddPlaceClick}\n          onEditAvatar={handleEditAvatarClick}\n          onCardClick={handleCardClick}\n        />\n\n        <Footer />\n\n      {/* Форма редактирования профиля («Редактировать профиль») */}\n      <EditProfilePopup isOpen={isEditProfilePopupOpen} onClose={closeAllPopups} onUpdateUser={handleUpdateUser} />\n\n      {/* Форма добавления карточки («Новое место»)*/}\n      <PopupWithForm isOpen={isAddPlacePopupOpen} onClose={closeAllPopups} name=\"card_add\" title=\"Новое место\" buttonTitle=\"Создать\">\n        <label htmlFor=\"card-name-input\" className=\"popup__field-wrapper\">\n          <input type=\"text\" name=\"name\" id=\"card-name-input\" className=\"popup__field popup__field_card_name\" placeholder=\"Название\" required minLength=\"2\" maxLength=\"30\" />\n          <span className=\"popup__field-error card-name-input-error\"></span>\n        </label>\n        <label htmlFor=\"image-link-input\" className=\"popup__field-wrapper\">\n          <input type=\"url\" name=\"link\" id=\"image-link-input\" className=\"popup__field popup__field_card_link\" placeholder=\"Ссылка на картинку\" required />\n          <span className=\"popup__field-error image-link-input-error\"></span>\n        </label>\n      </PopupWithForm>\n\n      {/* Форма удаления карточки («Вы уверены?»)*/}\n      <PopupWithForm name=\"card_delete\" title=\"Вы уверены?\" buttonTitle=\"Да\" />\n\n      {/* Форма обновления аватара («Обновить аватар»)*/}\n      <EditAvatarPopup isOpen={isEditAvatarPopupOpen} onClose={closeAllPopups} onUpdateAvatar={handleUpdateAvatar} />\n\n      {/* Значение selectedCard должно передаваться с помощью пропса card в компонент ImagePopup */}\n      <ImagePopup\n        card={selectedCard}\n        onClose={closeAllPopups}\n      />\n\n      </div>\n      </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}