{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._headers = headers;\n    this._baseUrl = baseUrl; // тело конструктора\n  } // загрузка данных профиля\n\n\n  getProfile() {\n    return fetch(`${this._baseUrl}/users/me `, {\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  } // загрузка карточек\n\n\n  getCards() {\n    // ...\n    return fetch(`${this._baseUrl}/cards `, {\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  } // изменение данных профиля на сервере\n\n\n  setUserInfo(_ref2) {\n    let {\n      name,\n      about\n    } = _ref2;\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  }\n\n  editProfile(name, about) {\n    // ...\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  } // Добавление новой карточки\n\n\n  addCard(_ref3) {\n    let {\n      name,\n      link\n    } = _ref3;\n    // ...\n    console.log(\"Api -> name\", name);\n    console.log(\"Api -> link\", link);\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  } // удаление новой карточки\n\n\n  deleteCard(id) {\n    // ...\n    return fetch(`${this._baseUrl}/cards/${id} `, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  }\n\n  changeLikeCardStatus(id, isLiked) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes `, {\n      method: isLiked ? \"DELETE\" : \"PUT\",\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  } // удаление лайка\n\n\n  deleteLike(id) {\n    // ...\n    return fetch(`${this._baseUrl}/cards/${id}/likes `, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  } // добавление лайка\n\n\n  addLike(id) {\n    // ...\n    return fetch(`${this._baseUrl}/cards/${id}/likes `, {\n      method: \"PUT\",\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  } // установка аватара\n\n\n  setAvatar(_ref4) {\n    let {\n      avatar\n    } = _ref4;\n    // ...\n    console.log(\"avatar -> \", avatar);\n    return fetch(`${this._baseUrl}/users/me/avatar `, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  } // другие методы работы с API\n\n\n} // внутри api.js создайте экземпляр класса Api с нужными параметрами (включая ваш токен)\n\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-37',\n  // authorization: '3e042cce-8939-40c2-9f95-48414868d982',\n  headers: {\n    authorization: '3e042cce-8939-40c2-9f95-48414868d982',\n    'Content-Type': 'application/json'\n  }\n}); // и экспортируйте этот экземпляр вместо самого класса\n\nexport default api;","map":{"version":3,"sources":["E:/OpenServer_5_3_8/domains/yprac.local/mesto-react/src/utils/Api.js"],"names":["Api","constructor","baseUrl","headers","_headers","_baseUrl","getProfile","fetch","then","res","ok","json","Promise","reject","status","getCards","setUserInfo","name","about","method","body","JSON","stringify","editProfile","addCard","link","console","log","deleteCard","id","changeLikeCardStatus","isLiked","deleteLike","addLike","setAvatar","avatar","api","authorization"],"mappings":"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","sourcesContent":["class Api {\n  constructor({ baseUrl, headers }) {\n    this._headers = headers;\n    this._baseUrl = baseUrl;\n    // тело конструктора\n  }\n// загрузка данных профиля\n  getProfile(){\n    return fetch(`${this._baseUrl}/users/me `, {\n      headers: this._headers\n    })\n    .then(res => res.ok ? res.json() : Promise.reject(res.status))\n\n  }\n// загрузка карточек\n  getCards() {\n    // ...\n    return fetch(`${this._baseUrl}/cards `, {\n      headers: this._headers\n    })\n    .then(res => res.ok ? res.json() : Promise.reject(res.status))\n  }\n  // изменение данных профиля на сервере\n  setUserInfo({name, about}){\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    })\n    .then(res => res.ok ? res.json() : Promise.reject(res.status))\n  }\n\n  editProfile(name, about) {\n    // ...\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    })\n    .then(res => res.ok ? res.json() : Promise.reject(res.status))\n  }\n// Добавление новой карточки\naddCard({name, link}) {\n  // ...\n  console.log(\"Api -> name\", name);\n  console.log(\"Api -> link\", link);\n  return fetch(`${this._baseUrl}/cards`, {\n    method: \"POST\",\n    headers: this._headers,\n    body: JSON.stringify({\n      name,\n      link\n    })\n  })\n  .then(res => res.ok ? res.json() : Promise.reject(res.status))\n}\n// удаление новой карточки\ndeleteCard(id) {\n  // ...\n  return fetch(`${this._baseUrl}/cards/${id} `, {\n    method: \"DELETE\",\n    headers: this._headers\n  })\n  .then(res => res.ok ? res.json() : Promise.reject(res.status))\n}\nchangeLikeCardStatus(id, isLiked){\n  return fetch(`${this._baseUrl}/cards/${id}/likes `, {\n    method:  isLiked ? \"DELETE\" :  \"PUT\",\n    headers: this._headers\n  })\n  .then(res => res.ok ? res.json() : Promise.reject(res.status))\n}\n// удаление лайка\ndeleteLike(id) {\n  // ...\n  return fetch(`${this._baseUrl}/cards/${id}/likes `, {\n    method: \"DELETE\",\n    headers: this._headers\n  })\n  .then(res => res.ok ? res.json() : Promise.reject(res.status))\n}\n// добавление лайка\naddLike(id) {\n  // ...\n  return fetch(`${this._baseUrl}/cards/${id}/likes `, {\n    method: \"PUT\",\n    headers: this._headers\n  })\n  .then(res => res.ok ? res.json() : Promise.reject(res.status))\n}\n// установка аватара\nsetAvatar({avatar}) {\n  // ...\n  console.log(\"avatar -> \", avatar);\n  return fetch(`${this._baseUrl}/users/me/avatar `, {\n    method: \"PATCH\",\n    headers: this._headers,\n    body: JSON.stringify({\n      avatar\n    })\n  })\n  .then(res => res.ok ? res.json() : Promise.reject(res.status))\n}\n  // другие методы работы с API\n}\n// внутри api.js создайте экземпляр класса Api с нужными параметрами (включая ваш токен)\n\n\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-37',\n  // authorization: '3e042cce-8939-40c2-9f95-48414868d982',\n  headers: {\n    authorization: '3e042cce-8939-40c2-9f95-48414868d982',\n    'Content-Type': 'application/json'\n  }\n});\n// и экспортируйте этот экземпляр вместо самого класса\nexport default api;\n"]},"metadata":{},"sourceType":"module"}